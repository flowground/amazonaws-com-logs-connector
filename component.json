{
    "title": "Amazon CloudWatch Logs",
    "description": "You can use Amazon CloudWatch Logs to monitor, store, and access your log files\nfrom Amazon EC2 instances, AWS CloudTrail, or other sources. You can then\nretrieve the associated log data from CloudWatch Logs using the CloudWatch\nconsole, CloudWatch Logs commands in the AWS CLI, CloudWatch Logs API, or\nCloudWatch Logs SDK.\n\nYou can use CloudWatch Logs to:\n\n *   Monitor logs from EC2 instances in real-time: You can use CloudWatch Logs to\n   monitor applications and systems using log data. For example, CloudWatch Logs\n   can track the number of errors that occur in your application logs and send\n   you a notification whenever the rate of errors exceeds a threshold that you\n   specify. CloudWatch Logs uses your log data for monitoring; so, no code\n   changes are required. For example, you can monitor application logs for\n   specific literal terms (such as \"NullReferenceException\") or count the number\n   of occurrences of a literal term at a particular position in log data (such\n   as \"404\" status codes in an Apache access log). When the term you are\n   searching for is found, CloudWatch Logs reports the data to a CloudWatch\n   metric that you specify.\n   \n   \n *   Monitor AWS CloudTrail logged events: You can create alarms in CloudWatch\n   and receive notifications of particular API activity as captured by\n   CloudTrail and use the notification to perform troubleshooting.\n   \n   \n *   Archive log data: You can use CloudWatch Logs to store your log data in\n   highly durable storage. You can change the log retention setting so that any\n   log events older than this setting are automatically deleted. The CloudWatch\n   Logs agent makes it easy to quickly send both rotated and non-rotated log\n   data off of a host and into the log service. You can then access the raw log\n   data when you need it.",
    "docsUrl": "https://docs.aws.amazon.com/logs/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/logs/2014-03-28/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://logs.amazonaws.com/",
                    "http://logs.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "AssociateKmsKey": {
            "main": "./lib/actions/AssociateKmsKey.js",
            "title": "AssociateKmsKey",
            "description": "Associates the specified AWS Key Management Service (AWS KMS) customer master\nkey (CMK) with the specified log group.\n\nAssociating an AWS KMS CMK with a log group overrides any existing associations\nbetween the log group and a CMK. After a CMK is associated with a log group, all\nnewly ingested data for the log group is encrypted using the CMK. This\nassociation is stored as long as the data encrypted with the CMK is still within\nAmazon CloudWatch Logs. This enables Amazon CloudWatch Logs to decrypt this data\nwhenever it is requested.\n\nNote that it can take up to 5 minutes for this operation to take effect.\n\nIf you attempt to associate a CMK with a log group but the CMK does not exist or\nthe CMK is disabled, you will receive an InvalidParameterException error.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AssociateKmsKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CancelExportTask": {
            "main": "./lib/actions/CancelExportTask.js",
            "title": "CancelExportTask",
            "description": "Cancels the specified export task.\n\nThe task must be in the PENDING or RUNNING state.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CancelExportTask.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateExportTask": {
            "main": "./lib/actions/CreateExportTask.js",
            "title": "CreateExportTask",
            "description": "Creates an export task, which allows you to efficiently export data from a log\ngroup to an Amazon S3 bucket.\n\nThis is an asynchronous call. If all the required information is provided, this\noperation initiates an export task and responds with the ID of the task. After\nthe task has started, you can use DescribeExportTasks to get the status of the\nexport task. Each account can only have one active (RUNNING or PENDING) export\ntask at a time. To cancel an export task, use CancelExportTask.\n\nYou can export logs from multiple log groups or multiple time ranges to the same\nS3 bucket. To separate out log data for each export task, you can specify a\nprefix to be used as the Amazon S3 key prefix for all exported objects.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateExportTask.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateLogGroup": {
            "main": "./lib/actions/CreateLogGroup.js",
            "title": "CreateLogGroup",
            "description": "Creates a log group with the specified name.\n\nYou can create up to 5000 log groups per account.\n\nYou must use the following guidelines when naming a log group:\n\n *  Log group names must be unique within a region for an AWS account.\n   \n   \n *  Log group names can be between 1 and 512 characters long.\n   \n   \n *  Log group names consist of the following characters: a-z, A-Z, 0-9, '_'\n   (underscore), '-' (hyphen), '/' (forward slash), and '.' (period).\n   \n   \n\nIf you associate a AWS Key Management Service (AWS KMS) customer master key\n(CMK) with the log group, ingested data is encrypted using the CMK. This\nassociation is stored as long as the data encrypted with the CMK is still within\nAmazon CloudWatch Logs. This enables Amazon CloudWatch Logs to decrypt this data\nwhenever it is requested.\n\nIf you attempt to associate a CMK with the log group but the CMK does not exist\nor the CMK is disabled, you will receive an InvalidParameterException error.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateLogGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateLogStream": {
            "main": "./lib/actions/CreateLogStream.js",
            "title": "CreateLogStream",
            "description": "Creates a log stream for the specified log group.\n\nThere is no limit on the number of log streams that you can create for a log\ngroup.\n\nYou must use the following guidelines when naming a log stream:\n\n *  Log stream names must be unique within the log group.\n   \n   \n *  Log stream names can be between 1 and 512 characters long.\n   \n   \n *  The ':' (colon) and '*' (asterisk) characters are not allowed.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateLogStream.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteDestination": {
            "main": "./lib/actions/DeleteDestination.js",
            "title": "DeleteDestination",
            "description": "Deletes the specified destination, and eventually disables all the subscription filters that publish to it. This operation does not delete the physical resource encapsulated by the destination.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteDestination.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteLogGroup": {
            "main": "./lib/actions/DeleteLogGroup.js",
            "title": "DeleteLogGroup",
            "description": "Deletes the specified log group and permanently deletes all the archived log events associated with the log group.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteLogGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteLogStream": {
            "main": "./lib/actions/DeleteLogStream.js",
            "title": "DeleteLogStream",
            "description": "Deletes the specified log stream and permanently deletes all the archived log events associated with the log stream.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteLogStream.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMetricFilter": {
            "main": "./lib/actions/DeleteMetricFilter.js",
            "title": "DeleteMetricFilter",
            "description": "Deletes the specified metric filter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMetricFilter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteResourcePolicy": {
            "main": "./lib/actions/DeleteResourcePolicy.js",
            "title": "DeleteResourcePolicy",
            "description": "Deletes a resource policy from this account. This revokes the access of the identities in that policy to put log events to this account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteResourcePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRetentionPolicy": {
            "main": "./lib/actions/DeleteRetentionPolicy.js",
            "title": "DeleteRetentionPolicy",
            "description": "Deletes the specified retention policy.\n\nLog events do not expire if they belong to log groups without a retention\npolicy.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRetentionPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteSubscriptionFilter": {
            "main": "./lib/actions/DeleteSubscriptionFilter.js",
            "title": "DeleteSubscriptionFilter",
            "description": "Deletes the specified subscription filter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSubscriptionFilter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeDestinations": {
            "main": "./lib/actions/DescribeDestinations.js",
            "title": "DescribeDestinations",
            "description": "Lists all your destinations. The results are ASCII-sorted by destination name.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeDestinations.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeExportTasks": {
            "main": "./lib/actions/DescribeExportTasks.js",
            "title": "DescribeExportTasks",
            "description": "Lists the specified export tasks. You can list all your export tasks or filter the results based on task ID or task status.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeExportTasks.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeLogGroups": {
            "main": "./lib/actions/DescribeLogGroups.js",
            "title": "DescribeLogGroups",
            "description": "Lists the specified log groups. You can list all your log groups or filter the results by prefix. The results are ASCII-sorted by log group name.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeLogGroups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeLogStreams": {
            "main": "./lib/actions/DescribeLogStreams.js",
            "title": "DescribeLogStreams",
            "description": "Lists the log streams for the specified log group. You can list all the log\nstreams or filter the results by prefix. You can also control how the results\nare ordered.\n\nThis operation has a limit of five transactions per second, after which\ntransactions are throttled.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeLogStreams.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMetricFilters": {
            "main": "./lib/actions/DescribeMetricFilters.js",
            "title": "DescribeMetricFilters",
            "description": "Lists the specified metric filters. You can list all the metric filters or filter the results by log name, prefix, metric name, or metric namespace. The results are ASCII-sorted by filter name.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMetricFilters.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeQueries": {
            "main": "./lib/actions/DescribeQueries.js",
            "title": "DescribeQueries",
            "description": "Returns a list of CloudWatch Logs Insights queries that are scheduled, executing, or have been executed recently in this account. You can request all queries, or limit it to queries of a specific log group or queries with a certain status.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeQueries.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeResourcePolicies": {
            "main": "./lib/actions/DescribeResourcePolicies.js",
            "title": "DescribeResourcePolicies",
            "description": "Lists the resource policies in this account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeResourcePolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeSubscriptionFilters": {
            "main": "./lib/actions/DescribeSubscriptionFilters.js",
            "title": "DescribeSubscriptionFilters",
            "description": "Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix. The results are ASCII-sorted by filter name.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeSubscriptionFilters.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisassociateKmsKey": {
            "main": "./lib/actions/DisassociateKmsKey.js",
            "title": "DisassociateKmsKey",
            "description": "Disassociates the associated AWS Key Management Service (AWS KMS) customer\nmaster key (CMK) from the specified log group.\n\nAfter the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs\nstops encrypting newly ingested data for the log group. All previously ingested\ndata remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK\nwhenever the encrypted data is requested.\n\nNote that it can take up to 5 minutes for this operation to take effect.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisassociateKmsKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "FilterLogEvents": {
            "main": "./lib/actions/FilterLogEvents.js",
            "title": "FilterLogEvents",
            "description": "Lists log events from the specified log group. You can list all the log events\nor filter the results using a filter pattern, a time range, and the name of the\nlog stream.\n\nBy default, this operation returns as many log events as can fit in 1 MB (up to\n10,000 log events), or all the events found within the time range that you\nspecify. If the results include a token, then there are more log events\navailable, and you can get additional results by specifying the token in a\nsubsequent call.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/FilterLogEvents.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetLogEvents": {
            "main": "./lib/actions/GetLogEvents.js",
            "title": "GetLogEvents",
            "description": "Lists log events from the specified log stream. You can list all the log events\nor filter using a time range.\n\nBy default, this operation returns as many log events as can fit in a response\nsize of 1MB (up to 10,000 log events). You can get additional log events by\nspecifying one of the tokens in a subsequent call.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetLogEvents.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetLogGroupFields": {
            "main": "./lib/actions/GetLogGroupFields.js",
            "title": "GetLogGroupFields",
            "description": "Returns a list of the fields that are included in log events in the specified\nlog group, along with the percentage of log events that contain each field. The\nsearch is limited to a time period that you specify.\n\nIn the results, fields that start with @ are fields generated by CloudWatch\nLogs. For example, @timestamp is the timestamp of each log event.\n\nThe response results are sorted by the frequency percentage, starting with the\nhighest percentage.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetLogGroupFields.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetLogRecord": {
            "main": "./lib/actions/GetLogRecord.js",
            "title": "GetLogRecord",
            "description": "Retrieves all the fields and values of a single log event. All fields are\nretrieved, even if the original query that produced the logRecordPointer \nretrieved only a subset of fields. Fields are returned as field name/field value\npairs.\n\nAdditionally, the entire unparsed log event is returned within @message.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetLogRecord.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetQueryResults": {
            "main": "./lib/actions/GetQueryResults.js",
            "title": "GetQueryResults",
            "description": "Returns the results from the specified query. If the query is in progress,\npartial results of that current execution are returned. Only the fields\nrequested in the query are returned.\n\n GetQueryResults does not start a query execution. To run a query, use .",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetQueryResults.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTagsLogGroup": {
            "main": "./lib/actions/ListTagsLogGroup.js",
            "title": "ListTagsLogGroup",
            "description": "Lists the tags for the specified log group.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTagsLogGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutDestination": {
            "main": "./lib/actions/PutDestination.js",
            "title": "PutDestination",
            "description": "Creates or updates a destination. A destination encapsulates a physical resource\n(such as an Amazon Kinesis stream) and enables you to subscribe to a real-time\nstream of log events for a different account, ingested using PutLogEvents.\nCurrently, the only supported physical resource is a Kinesis stream belonging to\nthe same account as the destination.\n\nThrough an access policy, a destination controls what is written to its Kinesis\nstream. By default, PutDestination does not set any access policy with the\ndestination, which means a cross-account user cannot call PutSubscriptionFilter \nagainst this destination. To enable this, the destination owner must call \nPutDestinationPolicy after PutDestination.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutDestination.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutDestinationPolicy": {
            "main": "./lib/actions/PutDestinationPolicy.js",
            "title": "PutDestinationPolicy",
            "description": "Creates or updates an access policy associated with an existing destination. An access policy is an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html\">IAM policy document</a> that is used to authorize claims to register a subscription filter against a given destination.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutDestinationPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutLogEvents": {
            "main": "./lib/actions/PutLogEvents.js",
            "title": "PutLogEvents",
            "description": "Uploads a batch of log events to the specified log stream.\n\nYou must include the sequence token obtained from the response of the previous\ncall. An upload in a newly created log stream does not require a sequence token.\nYou can also get the sequence token using DescribeLogStreams. If you call \nPutLogEvents twice within a narrow time period using the same value for \nsequenceToken, both calls may be successful, or one may be rejected.\n\nThe batch of events must satisfy the following constraints:\n\n *  The maximum batch size is 1,048,576 bytes, and this size is calculated as\n   the sum of all event messages in UTF-8, plus 26 bytes for each log event.\n   \n   \n *  None of the log events in the batch can be more than 2 hours in the future.\n   \n   \n *  None of the log events in the batch can be older than 14 days or the\n   retention period of the log group.\n   \n   \n *  The log events in the batch must be in chronological ordered by their\n   timestamp. The timestamp is the time the event occurred, expressed as the\n   number of milliseconds after Jan 1, 1970 00:00:00 UTC. (In AWS Tools for\n   PowerShell and the AWS SDK for .NET, the timestamp is specified in .NET\n   format: yyyy-mm-ddThh:mm:ss. For example, 2017-09-15T13:45:30.) \n   \n   \n *  The maximum number of log events in a batch is 10,000.\n   \n   \n *  A batch of log events in a single request cannot span more than 24 hours.\n   Otherwise, the operation fails.\n   \n   \n\nIf a call to PutLogEvents returns \"UnrecognizedClientException\" the most likely\ncause is an invalid AWS access key ID or secret key.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutLogEvents.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutMetricFilter": {
            "main": "./lib/actions/PutMetricFilter.js",
            "title": "PutMetricFilter",
            "description": "Creates or updates a metric filter and associates it with the specified log\ngroup. Metric filters allow you to configure rules to extract metric data from\nlog events ingested through PutLogEvents.\n\nThe maximum number of metric filters that can be associated with a log group is\n100.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutMetricFilter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutResourcePolicy": {
            "main": "./lib/actions/PutResourcePolicy.js",
            "title": "PutResourcePolicy",
            "description": "Creates or updates a resource policy allowing other AWS services to put log events to this account, such as Amazon Route 53. An account can have up to 10 resource policies per region.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutResourcePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutRetentionPolicy": {
            "main": "./lib/actions/PutRetentionPolicy.js",
            "title": "PutRetentionPolicy",
            "description": "Sets the retention of the specified log group. A retention policy allows you to configure the number of days for which to retain log events in the specified log group.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutRetentionPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutSubscriptionFilter": {
            "main": "./lib/actions/PutSubscriptionFilter.js",
            "title": "PutSubscriptionFilter",
            "description": "Creates or updates a subscription filter and associates it with the specified\nlog group. Subscription filters allow you to subscribe to a real-time stream of\nlog events ingested through PutLogEvents and have them delivered to a specific\ndestination. Currently, the supported destinations are:\n\n *  An Amazon Kinesis stream belonging to the same account as the subscription\n   filter, for same-account delivery.\n   \n   \n *  A logical destination that belongs to a different account, for cross-account\n   delivery.\n   \n   \n *  An Amazon Kinesis Firehose delivery stream that belongs to the same account\n   as the subscription filter, for same-account delivery.\n   \n   \n *  An AWS Lambda function that belongs to the same account as the subscription\n   filter, for same-account delivery.\n   \n   \n\nThere can only be one subscription filter associated with a log group. If you\nare updating an existing filter, you must specify the correct name in filterName\n. Otherwise, the call fails because you cannot associate a second filter with a\nlog group.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutSubscriptionFilter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartQuery": {
            "main": "./lib/actions/StartQuery.js",
            "title": "StartQuery",
            "description": "Schedules a query of a log group using CloudWatch Logs Insights. You specify the\nlog group and time range to query, and the query string to use.\n\nFor more information, see CloudWatch Logs Insights Query Syntax\n[https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartQuery.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StopQuery": {
            "main": "./lib/actions/StopQuery.js",
            "title": "StopQuery",
            "description": "Stops a CloudWatch Logs Insights query that is in progress. If the query has already ended, the operation returns an error indicating that the specified query is not running.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StopQuery.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagLogGroup": {
            "main": "./lib/actions/TagLogGroup.js",
            "title": "TagLogGroup",
            "description": "Adds or updates the specified tags for the specified log group.\n\nTo list the tags for a log group, use ListTagsLogGroup. To remove tags, use \nUntagLogGroup.\n\nFor more information about tags, see Tag Log Groups in Amazon CloudWatch Logs\n[https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/log-group-tagging.html] \nin the Amazon CloudWatch Logs User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagLogGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TestMetricFilter": {
            "main": "./lib/actions/TestMetricFilter.js",
            "title": "TestMetricFilter",
            "description": "Tests the filter pattern of a metric filter against a sample of log event messages. You can use this operation to validate the correctness of a metric filter pattern.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TestMetricFilter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagLogGroup": {
            "main": "./lib/actions/UntagLogGroup.js",
            "title": "UntagLogGroup",
            "description": "Removes the specified tags from the specified log group.\n\nTo list the tags for a log group, use ListTagsLogGroup. To add tags, use \nUntagLogGroup.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagLogGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}