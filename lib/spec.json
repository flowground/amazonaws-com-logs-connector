{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://logs.amazonaws.com/"
        },
        {
            "url": "http://logs.amazonaws.com/"
        }
    ],
    "x-hasEquivalentPaths": true,
    "info": {
        "contact": {
            "email": "mike.ralphson@gmail.com",
            "name": "Mike Ralphson",
            "url": "https://github.com/mermade/aws2openapi",
            "x-twitter": "PermittedSoc"
        },
        "description": "<p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from Amazon EC2 instances, AWS CloudTrail, or other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console, CloudWatch Logs commands in the AWS CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real-time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs and send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring; so, no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\") or count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor AWS CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail and use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events older than this setting are automatically deleted. The CloudWatch Logs agent makes it easy to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>",
        "license": {
            "name": "Apache 2.0 License",
            "url": "http://www.apache.org/licenses/"
        },
        "termsOfService": "https://aws.amazon.com/service-terms/",
        "title": "Amazon CloudWatch Logs",
        "version": "2014-03-28",
        "x-apiClientRegistration": {
            "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
        },
        "x-apisguru-categories": [
            "cloud"
        ],
        "x-logo": {
            "backgroundColor": "#FFFFFF",
            "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
        },
        "x-origin": [
            {
                "contentType": "application/json",
                "converter": {
                    "url": "https://github.com/mermade/aws2openapi",
                    "version": "1.0.0"
                },
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/logs-2014-03-28.normal.json",
                "x-apisguru-direct": true
            }
        ],
        "x-preferred": true,
        "x-providerName": "amazonaws.com",
        "x-release": "v4",
        "x-serviceName": "logs"
    },
    "externalDocs": {
        "description": "Amazon Web Services documentation",
        "url": "https://docs.aws.amazon.com/logs/"
    },
    "security": [
        {
            "hmac": []
        }
    ],
    "paths": {
        "/": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Associates the specified AWS Key Management Service (AWS KMS) customer master key (CMK) with the specified log group.</p> <p>Associating an AWS KMS CMK with a log group overrides any existing associations between the log group and a CMK. After a CMK is associated with a log group, all newly ingested data for the log group is encrypted using the CMK. This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs. This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p> <p>Note that it can take up to 5 minutes for this operation to take effect.</p> <p>If you attempt to associate a CMK with a log group but the CMK does not exist or the CMK is disabled, you will receive an <code>InvalidParameterException</code> error. </p>",
                "operationId": "AssociateKmsKey",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "kmsKeyId": {
                                        "description": "The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\">Amazon Resource Names - AWS Key Management Service (AWS KMS)</a>.",
                                        "maxLength": 256,
                                        "type": "string"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "kmsKeyId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CancelExportTask": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Cancels the specified export task.</p> <p>The task must be in the <code>PENDING</code> or <code>RUNNING</code> state.</p>",
                "operationId": "CancelExportTask",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidOperationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "taskId": {
                                        "description": "The ID of the export task.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "taskId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateExportTask": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates an export task, which allows you to efficiently export data from a log group to an Amazon S3 bucket.</p> <p>This is an asynchronous call. If all the required information is provided, this operation initiates an export task and responds with the ID of the task. After the task has started, you can use <a>DescribeExportTasks</a> to get the status of the export task. Each account can only have one active (<code>RUNNING</code> or <code>PENDING</code>) export task at a time. To cancel an export task, use <a>CancelExportTask</a>.</p> <p>You can export logs from multiple log groups or multiple time ranges to the same S3 bucket. To separate out log data for each export task, you can specify a prefix to be used as the Amazon S3 key prefix for all exported objects.</p>",
                "operationId": "CreateExportTask",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "taskId": {
                                            "description": "The ID of the export task.",
                                            "maxLength": 512,
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "ResourceAlreadyExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "destination": {
                                        "description": "The name of S3 bucket for the exported log data. The bucket must be in the same AWS region.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "destinationPrefix": {
                                        "description": "The prefix used as the start of the key for every object exported. If you don't specify a value, the default is <code>exportedlogs</code>.",
                                        "type": "string"
                                    },
                                    "from": {
                                        "description": "The start time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "logStreamNamePrefix": {
                                        "description": "Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "taskName": {
                                        "description": "The name of the export task.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "to": {
                                        "description": "The end time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.",
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "from",
                                    "to",
                                    "destination"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateLogGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates a log group with the specified name.</p> <p>You can create up to 5000 log groups per account.</p> <p>You must use the following guidelines when naming a log group:</p> <ul> <li> <p>Log group names must be unique within a region for an AWS account.</p> </li> <li> <p>Log group names can be between 1 and 512 characters long.</p> </li> <li> <p>Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), '/' (forward slash), and '.' (period).</p> </li> </ul> <p>If you associate a AWS Key Management Service (AWS KMS) customer master key (CMK) with the log group, ingested data is encrypted using the CMK. This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs. This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p> <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the CMK is disabled, you will receive an <code>InvalidParameterException</code> error. </p>",
                "operationId": "CreateLogGroup",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceAlreadyExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "kmsKeyId": {
                                        "description": "The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\">Amazon Resource Names - AWS Key Management Service (AWS KMS)</a>.",
                                        "maxLength": 256,
                                        "type": "string"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "tags": {
                                        "description": "The key-value pairs to use for the tags.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "maxLength": 256,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 50,
                                        "minItems": 1,
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateLogStream": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates a log stream for the specified log group.</p> <p>There is no limit on the number of log streams that you can create for a log group.</p> <p>You must use the following guidelines when naming a log stream:</p> <ul> <li> <p>Log stream names must be unique within the log group.</p> </li> <li> <p>Log stream names can be between 1 and 512 characters long.</p> </li> <li> <p>The ':' (colon) and '*' (asterisk) characters are not allowed.</p> </li> </ul>",
                "operationId": "CreateLogStream",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceAlreadyExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "logStreamName": {
                                        "description": "The name of the log stream.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "logStreamName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteDestination": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the specified destination, and eventually disables all the subscription filters that publish to it. This operation does not delete the physical resource encapsulated by the destination.",
                "operationId": "DeleteDestination",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "destinationName": {
                                        "description": "The name of the destination.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "destinationName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteLogGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the specified log group and permanently deletes all the archived log events associated with the log group.",
                "operationId": "DeleteLogGroup",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteLogStream": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the specified log stream and permanently deletes all the archived log events associated with the log stream.",
                "operationId": "DeleteLogStream",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "logStreamName": {
                                        "description": "The name of the log stream.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "logStreamName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteMetricFilter": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the specified metric filter.",
                "operationId": "DeleteMetricFilter",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filterName": {
                                        "description": "The name of the metric filter.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "filterName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteResourcePolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes a resource policy from this account. This revokes the access of the identities in that policy to put log events to this account.",
                "operationId": "DeleteResourcePolicy",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "policyName": {
                                        "description": "The name of the policy to be revoked. This parameter is required.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteRetentionPolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Deletes the specified retention policy.</p> <p>Log events do not expire if they belong to log groups without a retention policy.</p>",
                "operationId": "DeleteRetentionPolicy",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteSubscriptionFilter": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the specified subscription filter.",
                "operationId": "DeleteSubscriptionFilter",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filterName": {
                                        "description": "The name of the subscription filter.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "filterName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeDestinations": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists all your destinations. The results are ASCII-sorted by destination name.",
                "operationId": "DescribeDestinations",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "destinations": {
                                            "description": "The destinations.",
                                            "items": {
                                                "description": "Represents a cross-account destination that receives subscription log events.",
                                                "properties": {
                                                    "accessPolicy": {
                                                        "description": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "arn": {
                                                        "description": "The ARN of this destination.",
                                                        "type": "string"
                                                    },
                                                    "creationTime": {
                                                        "description": "The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "destinationName": {
                                                        "description": "The name of the destination.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[^:*]*",
                                                        "type": "string"
                                                    },
                                                    "roleArn": {
                                                        "description": "A role for impersonation, used when delivering log events to the target.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "targetArn": {
                                                        "description": "The Amazon Resource Name (ARN) of the physical target to where the log events are delivered (for example, a Kinesis stream).",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "DestinationNamePrefix": {
                                        "description": "The prefix to match. If you don't specify a value, no prefix filter is applied.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "limit": {
                                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                                        "maximum": 50,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeExportTasks": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the specified export tasks. You can list all your export tasks or filter the results based on task ID or task status.",
                "operationId": "DescribeExportTasks",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "exportTasks": {
                                            "description": "The export tasks.",
                                            "items": {
                                                "description": "Represents an export task.",
                                                "properties": {
                                                    "destination": {
                                                        "description": "The name of Amazon S3 bucket to which the log data was exported.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "destinationPrefix": {
                                                        "description": "The prefix that was used as the start of Amazon S3 key for every object exported.",
                                                        "type": "string"
                                                    },
                                                    "executionInfo": {
                                                        "description": "Execution info about the export task.",
                                                        "properties": {
                                                            "completionTime": {
                                                                "description": "The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                                "minimum": 0,
                                                                "type": "integer"
                                                            },
                                                            "creationTime": {
                                                                "description": "The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                                "minimum": 0,
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "from": {
                                                        "description": "The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not exported.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "logGroupName": {
                                                        "description": "The name of the log group from which logs data was exported.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                                        "type": "string"
                                                    },
                                                    "status": {
                                                        "description": "The status of the export task.",
                                                        "properties": {
                                                            "code": {
                                                                "description": "The status code of the export task.",
                                                                "enum": [
                                                                    "CANCELLED",
                                                                    "COMPLETED",
                                                                    "FAILED",
                                                                    "PENDING",
                                                                    "PENDING_CANCEL",
                                                                    "RUNNING"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "message": {
                                                                "description": "The status message related to the status code.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "taskId": {
                                                        "description": "The ID of the export task.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "taskName": {
                                                        "description": "The name of the export task.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "to": {
                                                        "description": "The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "limit": {
                                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                                        "maximum": 50,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "statusCode": {
                                        "description": "The status code of the export task. Specifying a status code filters the results to zero or more export tasks.",
                                        "enum": [
                                            "CANCELLED",
                                            "COMPLETED",
                                            "FAILED",
                                            "PENDING",
                                            "PENDING_CANCEL",
                                            "RUNNING"
                                        ],
                                        "type": "string"
                                    },
                                    "taskId": {
                                        "description": "The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeLogGroups": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the specified log groups. You can list all your log groups or filter the results by prefix. The results are ASCII-sorted by log group name.",
                "operationId": "DescribeLogGroups",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "logGroups": {
                                            "description": "The log groups.",
                                            "items": {
                                                "description": "Represents a log group.",
                                                "properties": {
                                                    "arn": {
                                                        "description": "The Amazon Resource Name (ARN) of the log group.",
                                                        "type": "string"
                                                    },
                                                    "creationTime": {
                                                        "description": "The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "kmsKeyId": {
                                                        "description": "The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.",
                                                        "maxLength": 256,
                                                        "type": "string"
                                                    },
                                                    "logGroupName": {
                                                        "description": "The name of the log group.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                                        "type": "string"
                                                    },
                                                    "metricFilterCount": {
                                                        "description": "The number of metric filters.",
                                                        "type": "integer"
                                                    },
                                                    "retentionInDays": {
                                                        "description": "The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.",
                                                        "type": "integer"
                                                    },
                                                    "storedBytes": {
                                                        "description": "The number of bytes stored.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "limit": {
                                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                                        "maximum": 50,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "logGroupNamePrefix": {
                                        "description": "The prefix to match.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeLogStreams": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Lists the log streams for the specified log group. You can list all the log streams or filter the results by prefix. You can also control how the results are ordered.</p> <p>This operation has a limit of five transactions per second, after which transactions are throttled.</p>",
                "operationId": "DescribeLogStreams",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "logStreams": {
                                            "description": "The log streams.",
                                            "items": {
                                                "description": "Represents a log stream, which is a sequence of log events from a single emitter of logs.",
                                                "properties": {
                                                    "arn": {
                                                        "description": "The Amazon Resource Name (ARN) of the log stream.",
                                                        "type": "string"
                                                    },
                                                    "creationTime": {
                                                        "description": "The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "firstEventTimestamp": {
                                                        "description": "The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "lastEventTimestamp": {
                                                        "description": "The time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The <code>lastEventTime</code> value updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but may take longer in some rare situations.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "lastIngestionTime": {
                                                        "description": "The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "logStreamName": {
                                                        "description": "The name of the log stream.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[^:*]*",
                                                        "type": "string"
                                                    },
                                                    "storedBytes": {
                                                        "description": "The number of bytes stored.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "uploadSequenceToken": {
                                                        "description": "The sequence token.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "descending": {
                                        "description": "If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.",
                                        "type": "boolean"
                                    },
                                    "limit": {
                                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                                        "maximum": 50,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "logStreamNamePrefix": {
                                        "description": "<p>The prefix to match.</p> <p>If <code>orderBy</code> is <code>LastEventTime</code>,you cannot specify this parameter.</p>",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "orderBy": {
                                        "description": "<p>If the value is <code>LogStreamName</code>, the results are ordered by log stream name. If the value is <code>LastEventTime</code>, the results are ordered by the event time. The default value is <code>LogStreamName</code>.</p> <p>If you order the results by event time, you cannot specify the <code>logStreamNamePrefix</code> parameter.</p> <p>lastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTimeStamp updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but may take longer in some rare situations.</p>",
                                        "enum": [
                                            "LogStreamName",
                                            "LastEventTime"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeMetricFilters": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the specified metric filters. You can list all the metric filters or filter the results by log name, prefix, metric name, or metric namespace. The results are ASCII-sorted by filter name.",
                "operationId": "DescribeMetricFilters",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "metricFilters": {
                                            "description": "The metric filters.",
                                            "items": {
                                                "description": "Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.",
                                                "properties": {
                                                    "creationTime": {
                                                        "description": "The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "filterName": {
                                                        "description": "The name of the metric filter.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[^:*]*",
                                                        "type": "string"
                                                    },
                                                    "filterPattern": {
                                                        "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                                                        "maxLength": 1024,
                                                        "minLength": 0,
                                                        "type": "string"
                                                    },
                                                    "logGroupName": {
                                                        "description": "The name of the log group.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                                        "type": "string"
                                                    },
                                                    "metricTransformations": {
                                                        "description": "The metric transformations.",
                                                        "items": {
                                                            "description": "Indicates how to transform ingested log eventsto metric data in a CloudWatch metric.",
                                                            "properties": {
                                                                "defaultValue": {
                                                                    "description": "(Optional) The value to emit when a filter pattern does not match a log event. This value can be null.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                },
                                                                "metricName": {
                                                                    "description": "The name of the CloudWatch metric.",
                                                                    "maxLength": 255,
                                                                    "pattern": "[^:*$]*",
                                                                    "type": "string"
                                                                },
                                                                "metricNamespace": {
                                                                    "description": "The namespace of the CloudWatch metric.",
                                                                    "maxLength": 255,
                                                                    "pattern": "[^:*$]*",
                                                                    "type": "string"
                                                                },
                                                                "metricValue": {
                                                                    "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
                                                                    "maxLength": 100,
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "metricName",
                                                                "metricNamespace",
                                                                "metricValue"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "maxItems": 1,
                                                        "minItems": 1,
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filterNamePrefix": {
                                        "description": "The prefix to match.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "limit": {
                                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                                        "maximum": 50,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "metricName": {
                                        "description": "Filters results to include only those with the specified metric name. If you include this parameter in your request, you must also include the <code>metricNamespace</code> parameter.",
                                        "maxLength": 255,
                                        "pattern": "[^:*$]*",
                                        "type": "string"
                                    },
                                    "metricNamespace": {
                                        "description": "Filters results to include only those in the specified namespace. If you include this parameter in your request, you must also include the <code>metricName</code> parameter.",
                                        "maxLength": 255,
                                        "pattern": "[^:*$]*",
                                        "type": "string"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeQueries": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Returns a list of CloudWatch Logs Insights queries that are scheduled, executing, or have been executed recently in this account. You can request all queries, or limit it to queries of a specific log group or queries with a certain status.",
                "operationId": "DescribeQueries",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "nextToken": {
                                            "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "queries": {
                                            "description": "The list of queries that match the request.",
                                            "items": {
                                                "description": "Information about one CloudWatch Logs Insights query that matches the request in a <code>DescribeQueries</code> operation. ",
                                                "properties": {
                                                    "createTime": {
                                                        "description": "The date and time that this query was created.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "logGroupName": {
                                                        "description": "The name of the log group scanned by this query.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                                        "type": "string"
                                                    },
                                                    "queryId": {
                                                        "description": "The unique ID number of this query.",
                                                        "maxLength": 256,
                                                        "minLength": 0,
                                                        "type": "string"
                                                    },
                                                    "queryString": {
                                                        "description": "The query string used in this query.",
                                                        "maxLength": 2048,
                                                        "minLength": 0,
                                                        "type": "string"
                                                    },
                                                    "status": {
                                                        "description": "The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.",
                                                        "enum": [
                                                            "Scheduled",
                                                            "Running",
                                                            "Complete",
                                                            "Failed",
                                                            "Cancelled"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "Limits the returned queries to only those for the specified log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "maxResults": {
                                        "description": "Limits the number of returned queries to the specified number.",
                                        "maximum": 1000,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "status": {
                                        "description": "Limits the returned queries to only those that have the specified status. Valid values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, and <code>Scheduled</code>.",
                                        "enum": [
                                            "Scheduled",
                                            "Running",
                                            "Complete",
                                            "Failed",
                                            "Cancelled"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeResourcePolicies": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the resource policies in this account.",
                "operationId": "DescribeResourcePolicies",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "nextToken": {
                                            "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "resourcePolicies": {
                                            "description": "The resource policies that exist in this account.",
                                            "items": {
                                                "description": "A policy enabling one or more entities to put logs to a log group in this account.",
                                                "properties": {
                                                    "lastUpdatedTime": {
                                                        "description": "Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "policyDocument": {
                                                        "description": "The details of the policy.",
                                                        "maxLength": 5120,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "policyName": {
                                                        "description": "The name of the resource policy.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "limit": {
                                        "description": "The maximum number of resource policies to be displayed with one call of this API.",
                                        "maximum": 50,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeSubscriptionFilters": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix. The results are ASCII-sorted by filter name.",
                "operationId": "DescribeSubscriptionFilters",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "nextToken": {
                                            "description": "The token for the next set of items to return. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "subscriptionFilters": {
                                            "description": "The subscription filters.",
                                            "items": {
                                                "description": "Represents a subscription filter.",
                                                "properties": {
                                                    "creationTime": {
                                                        "description": "The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "destinationArn": {
                                                        "description": "The Amazon Resource Name (ARN) of the destination.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "distribution": {
                                                        "description": "The method used to distribute log data to the destination, which can be either random or grouped by log stream.",
                                                        "enum": [
                                                            "Random",
                                                            "ByLogStream"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "filterName": {
                                                        "description": "The name of the subscription filter.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[^:*]*",
                                                        "type": "string"
                                                    },
                                                    "filterPattern": {
                                                        "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                                                        "maxLength": 1024,
                                                        "minLength": 0,
                                                        "type": "string"
                                                    },
                                                    "logGroupName": {
                                                        "description": "The name of the log group.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                                        "type": "string"
                                                    },
                                                    "roleArn": {
                                                        "description": "<p/>",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filterNamePrefix": {
                                        "description": "The prefix to match. If you don't specify a value, no prefix filter is applied.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "limit": {
                                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                                        "maximum": 50,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DisassociateKmsKey": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Disassociates the associated AWS Key Management Service (AWS KMS) customer master key (CMK) from the specified log group.</p> <p>After the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK whenever the encrypted data is requested.</p> <p>Note that it can take up to 5 minutes for this operation to take effect.</p>",
                "operationId": "DisassociateKmsKey",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#FilterLogEvents": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Lists log events from the specified log group. You can list all the log events or filter the results using a filter pattern, a time range, and the name of the log stream.</p> <p>By default, this operation returns as many log events as can fit in 1 MB (up to 10,000 log events), or all the events found within the time range that you specify. If the results include a token, then there are more log events available, and you can get additional results by specifying the token in a subsequent call.</p>",
                "operationId": "FilterLogEvents",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "events": {
                                            "description": "The matched events.",
                                            "items": {
                                                "description": "Represents a matched event.",
                                                "properties": {
                                                    "eventId": {
                                                        "description": "The ID of the event.",
                                                        "type": "string"
                                                    },
                                                    "ingestionTime": {
                                                        "description": "The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "logStreamName": {
                                                        "description": "The name of the log stream to which this event belongs.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[^:*]*",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "The data contained in the log event.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "timestamp": {
                                                        "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The token to use when requesting the next set of items. The token expires after 24 hours.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "searchedLogStreams": {
                                            "description": "Indicates which log streams have been searched and whether each has been searched completely.",
                                            "items": {
                                                "description": "Represents the search status of a log stream.",
                                                "properties": {
                                                    "logStreamName": {
                                                        "description": "The name of the log stream.",
                                                        "maxLength": 512,
                                                        "minLength": 1,
                                                        "pattern": "[^:*]*",
                                                        "type": "string"
                                                    },
                                                    "searchedCompletely": {
                                                        "description": "Indicates whether all the events in this log stream were searched.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "endTime": {
                                        "description": "The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "filterPattern": {
                                        "description": "<p>The filter pattern to use. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html\">Filter and Pattern Syntax</a>.</p> <p>If not provided, all the events are matched.</p>",
                                        "maxLength": 1024,
                                        "minLength": 0,
                                        "type": "string"
                                    },
                                    "interleaved": {
                                        "description": "If the value is true, the operation makes a best effort to provide responses that contain events from multiple log streams within the log group, interleaved in a single response. If the value is false, all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. The default is false.",
                                        "type": "boolean"
                                    },
                                    "limit": {
                                        "description": "The maximum number of events to return. The default is 10,000 events.",
                                        "maximum": 10000,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group to search.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "logStreamNamePrefix": {
                                        "description": "<p>Filters the results to include only events from log streams that have names starting with this prefix.</p> <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, but the value for <code>logStreamNamePrefix</code> does not match any log stream names specified in <code>logStreamNames</code>, the action returns an <code>InvalidParameterException</code> error.</p>",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "logStreamNames": {
                                        "description": "<p>Filters the results to only logs from the log streams in this list.</p> <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, the action returns an <code>InvalidParameterException</code> error.</p>",
                                        "items": {
                                            "maxLength": 512,
                                            "minLength": 1,
                                            "pattern": "[^:*]*",
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of events to return. (You received this token from a previous call.)",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "startTime": {
                                        "description": "The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not returned.",
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetLogEvents": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Lists log events from the specified log stream. You can list all the log events or filter using a time range.</p> <p>By default, this operation returns as many log events as can fit in a response size of 1MB (up to 10,000 log events). You can get additional log events by specifying one of the tokens in a subsequent call.</p>",
                "operationId": "GetLogEvents",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "events": {
                                            "description": "The events.",
                                            "items": {
                                                "description": "Represents a log event.",
                                                "properties": {
                                                    "ingestionTime": {
                                                        "description": "The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "description": "The data contained in the log event.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "timestamp": {
                                                        "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextBackwardToken": {
                                            "description": "The token for the next set of items in the backward direction. The token expires after 24 hours. This token will never be null. If you have reached the end of the stream, it will return the same token you passed in.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "nextForwardToken": {
                                            "description": "The token for the next set of items in the forward direction. The token expires after 24 hours. If you have reached the end of the stream, it will return the same token you passed in.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "endTime": {
                                        "description": "The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "limit": {
                                        "description": "The maximum number of log events returned. If you don't specify a value, the maximum is as many log events as can fit in a response size of 1 MB, up to 10,000 log events.",
                                        "maximum": 10000,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "logStreamName": {
                                        "description": "The name of the log stream.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "nextToken": {
                                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "startFromHead": {
                                        "description": "If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false.",
                                        "type": "boolean"
                                    },
                                    "startTime": {
                                        "description": "The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.",
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "logStreamName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetLogGroupFields": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Returns a list of the fields that are included in log events in the specified log group, along with the percentage of log events that contain each field. The search is limited to a time period that you specify.</p> <p>In the results, fields that start with @ are fields generated by CloudWatch Logs. For example, <code>@timestamp</code> is the timestamp of each log event.</p> <p>The response results are sorted by the frequency percentage, starting with the highest percentage.</p>",
                "operationId": "GetLogGroupFields",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "logGroupFields": {
                                            "description": "The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.",
                                            "items": {
                                                "description": "The fields contained in log events found by a <code>GetLogGroupFields</code> operation, along with the percentage of queried log events in which each field appears.",
                                                "properties": {
                                                    "name": {
                                                        "description": "The name of a log field.",
                                                        "type": "string"
                                                    },
                                                    "percent": {
                                                        "description": "The percentage of log events queried that contained the field.",
                                                        "maximum": 100,
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group to search.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "time": {
                                        "description": "<p>The time to set as the center of the query. If you specify <code>time</code>, the 8 minutes before and 8 minutes after this time are searched. If you omit <code>time</code>, the past 15 minutes are queried.</p> <p>The <code>time</code> value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.</p>",
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetLogRecord": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Retrieves all the fields and values of a single log event. All fields are retrieved, even if the original query that produced the <code>logRecordPointer</code> retrieved only a subset of fields. Fields are returned as field name/field value pairs.</p> <p>Additionally, the entire unparsed log event is returned within <code>@message</code>.</p>",
                "operationId": "GetLogRecord",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "logRecord": {
                                            "description": "The requested log event, as a JSON string.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logRecordPointer": {
                                        "description": "The pointer corresponding to the log event record you want to retrieve. You get this from the response of a <code>GetQueryResults</code> operation. In that response, the value of the <code>@ptr</code> field for a log event is the value to use as <code>logRecordPointer</code> to retrieve that complete log event record.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logRecordPointer"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetQueryResults": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Returns the results from the specified query. If the query is in progress, partial results of that current execution are returned. Only the fields requested in the query are returned.</p> <p> <code>GetQueryResults</code> does not start a query execution. To run a query, use .</p>",
                "operationId": "GetQueryResults",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "description": "<p>The log events that matched the query criteria during the most recent time it ran.</p> <p>The <code>results</code> value is an array of arrays. Each log event is one object in the top-level array. Each of these log event objects is an array of <code>field</code>/<code>value</code> pairs.</p>",
                                            "items": {
                                                "items": {
                                                    "description": "Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.",
                                                    "properties": {
                                                        "field": {
                                                            "description": "The log event field.",
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "description": "The value of this field.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "type": "array"
                                        },
                                        "statistics": {
                                            "description": "Includes the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.",
                                            "properties": {
                                                "bytesScanned": {
                                                    "description": "The total number of bytes in the log events scanned during the query.",
                                                    "format": "double",
                                                    "type": "number"
                                                },
                                                "recordsMatched": {
                                                    "description": "The number of log events that matched the query string.",
                                                    "format": "double",
                                                    "type": "number"
                                                },
                                                "recordsScanned": {
                                                    "description": "The total number of log events scanned during the query.",
                                                    "format": "double",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "status": {
                                            "description": "The status of the most recent running of the query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.",
                                            "enum": [
                                                "Scheduled",
                                                "Running",
                                                "Complete",
                                                "Failed",
                                                "Cancelled"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "queryId": {
                                        "description": "The ID number of the query.",
                                        "maxLength": 256,
                                        "minLength": 0,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "queryId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListTagsLogGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the tags for the specified log group.",
                "operationId": "ListTagsLogGroup",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "tags": {
                                            "description": "The tags for the log group.",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "maxLength": 256,
                                                        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "maxItems": 50,
                                            "minItems": 1,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutDestination": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates or updates a destination. A destination encapsulates a physical resource (such as an Amazon Kinesis stream) and enables you to subscribe to a real-time stream of log events for a different account, ingested using <a>PutLogEvents</a>. Currently, the only supported physical resource is a Kinesis stream belonging to the same account as the destination.</p> <p>Through an access policy, a destination controls what is written to its Kinesis stream. By default, <code>PutDestination</code> does not set any access policy with the destination, which means a cross-account user cannot call <a>PutSubscriptionFilter</a> against this destination. To enable this, the destination owner must call <a>PutDestinationPolicy</a> after <code>PutDestination</code>.</p>",
                "operationId": "PutDestination",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "destination": {
                                            "description": "The destination.",
                                            "properties": {
                                                "accessPolicy": {
                                                    "description": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination.",
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "arn": {
                                                    "description": "The ARN of this destination.",
                                                    "type": "string"
                                                },
                                                "creationTime": {
                                                    "description": "The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "destinationName": {
                                                    "description": "The name of the destination.",
                                                    "maxLength": 512,
                                                    "minLength": 1,
                                                    "pattern": "[^:*]*",
                                                    "type": "string"
                                                },
                                                "roleArn": {
                                                    "description": "A role for impersonation, used when delivering log events to the target.",
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "targetArn": {
                                                    "description": "The Amazon Resource Name (ARN) of the physical target to where the log events are delivered (for example, a Kinesis stream).",
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "destinationName": {
                                        "description": "A name for the destination.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "roleArn": {
                                        "description": "The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon Kinesis PutRecord operation on the destination stream.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "targetArn": {
                                        "description": "The ARN of an Amazon Kinesis stream to which to deliver matching log events.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "destinationName",
                                    "targetArn",
                                    "roleArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutDestinationPolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates or updates an access policy associated with an existing destination. An access policy is an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html\">IAM policy document</a> that is used to authorize claims to register a subscription filter against a given destination.",
                "operationId": "PutDestinationPolicy",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "accessPolicy": {
                                        "description": "An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "destinationName": {
                                        "description": "A name for an existing destination.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "destinationName",
                                    "accessPolicy"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutLogEvents": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Uploads a batch of log events to the specified log stream.</p> <p>You must include the sequence token obtained from the response of the previous call. An upload in a newly created log stream does not require a sequence token. You can also get the sequence token using <a>DescribeLogStreams</a>. If you call <code>PutLogEvents</code> twice within a narrow time period using the same value for <code>sequenceToken</code>, both calls may be successful, or one may be rejected.</p> <p>The batch of events must satisfy the following constraints:</p> <ul> <li> <p>The maximum batch size is 1,048,576 bytes, and this size is calculated as the sum of all event messages in UTF-8, plus 26 bytes for each log event.</p> </li> <li> <p>None of the log events in the batch can be more than 2 hours in the future.</p> </li> <li> <p>None of the log events in the batch can be older than 14 days or the retention period of the log group.</p> </li> <li> <p>The log events in the batch must be in chronological ordered by their timestamp. The timestamp is the time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. (In AWS Tools for PowerShell and the AWS SDK for .NET, the timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. For example, 2017-09-15T13:45:30.) </p> </li> <li> <p>The maximum number of log events in a batch is 10,000.</p> </li> <li> <p>A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.</p> </li> </ul> <p>If a call to PutLogEvents returns \"UnrecognizedClientException\" the most likely cause is an invalid AWS access key ID or secret key. </p>",
                "operationId": "PutLogEvents",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "nextSequenceToken": {
                                            "description": "The next sequence token.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "rejectedLogEventsInfo": {
                                            "description": "The rejected events.",
                                            "properties": {
                                                "expiredLogEventEndIndex": {
                                                    "description": "The expired log events.",
                                                    "type": "integer"
                                                },
                                                "tooNewLogEventStartIndex": {
                                                    "description": "The log events that are too new.",
                                                    "type": "integer"
                                                },
                                                "tooOldLogEventEndIndex": {
                                                    "description": "The log events that are too old.",
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidSequenceTokenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "DataAlreadyAcceptedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UnrecognizedClientException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logEvents": {
                                        "description": "The log events.",
                                        "items": {
                                            "description": "Represents a log event, which is a record of activity that was recorded by the application or resource being monitored.",
                                            "properties": {
                                                "message": {
                                                    "description": "The raw event message.",
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "timestamp": {
                                                    "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "timestamp",
                                                "message"
                                            ],
                                            "type": "object"
                                        },
                                        "maxItems": 10000,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "logStreamName": {
                                        "description": "The name of the log stream.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "sequenceToken": {
                                        "description": "The sequence token obtained from the response of the previous <code>PutLogEvents</code> call. An upload in a newly created log stream does not require a sequence token. You can also get the sequence token using <a>DescribeLogStreams</a>. If you call <code>PutLogEvents</code> twice within a narrow time period using the same value for <code>sequenceToken</code>, both calls may be successful, or one may be rejected.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "logStreamName",
                                    "logEvents"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutMetricFilter": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates or updates a metric filter and associates it with the specified log group. Metric filters allow you to configure rules to extract metric data from log events ingested through <a>PutLogEvents</a>.</p> <p>The maximum number of metric filters that can be associated with a log group is 100.</p>",
                "operationId": "PutMetricFilter",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filterName": {
                                        "description": "A name for the metric filter.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "filterPattern": {
                                        "description": "A filter pattern for extracting metric data out of ingested log events.",
                                        "maxLength": 1024,
                                        "minLength": 0,
                                        "type": "string"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "metricTransformations": {
                                        "description": "A collection of information that defines how metric data gets emitted.",
                                        "items": {
                                            "description": "Indicates how to transform ingested log eventsto metric data in a CloudWatch metric.",
                                            "properties": {
                                                "defaultValue": {
                                                    "description": "(Optional) The value to emit when a filter pattern does not match a log event. This value can be null.",
                                                    "format": "double",
                                                    "type": "number"
                                                },
                                                "metricName": {
                                                    "description": "The name of the CloudWatch metric.",
                                                    "maxLength": 255,
                                                    "pattern": "[^:*$]*",
                                                    "type": "string"
                                                },
                                                "metricNamespace": {
                                                    "description": "The namespace of the CloudWatch metric.",
                                                    "maxLength": 255,
                                                    "pattern": "[^:*$]*",
                                                    "type": "string"
                                                },
                                                "metricValue": {
                                                    "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
                                                    "maxLength": 100,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "metricName",
                                                "metricNamespace",
                                                "metricValue"
                                            ],
                                            "type": "object"
                                        },
                                        "maxItems": 1,
                                        "minItems": 1,
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "filterName",
                                    "filterPattern",
                                    "metricTransformations"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutResourcePolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates or updates a resource policy allowing other AWS services to put log events to this account, such as Amazon Route 53. An account can have up to 10 resource policies per region.",
                "operationId": "PutResourcePolicy",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "resourcePolicy": {
                                            "description": "The new policy.",
                                            "properties": {
                                                "lastUpdatedTime": {
                                                    "description": "Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "policyDocument": {
                                                    "description": "The details of the policy.",
                                                    "maxLength": 5120,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "policyName": {
                                                    "description": "The name of the resource policy.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "policyDocument": {
                                        "description": "<p>Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string.</p> <p>The following example creates a resource policy enabling the Route 53 service to put DNS query logs in to the specified log group. Replace \"logArn\" with the ARN of your CloudWatch Logs resource, such as a log group or log stream.</p> <p> <code>{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"Route53LogsToCloudWatchLogs\", \"Effect\": \"Allow\", \"Principal\": { \"Service\": [ \"route53.amazonaws.com\" ] }, \"Action\":\"logs:PutLogEvents\", \"Resource\": \"logArn\" } ] } </code> </p>",
                                        "maxLength": 5120,
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "policyName": {
                                        "description": "Name of the new policy. This parameter is required.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutRetentionPolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Sets the retention of the specified log group. A retention policy allows you to configure the number of days for which to retain log events in the specified log group.",
                "operationId": "PutRetentionPolicy",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "retentionInDays": {
                                        "description": "The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "retentionInDays"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutSubscriptionFilter": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates or updates a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events ingested through <a>PutLogEvents</a> and have them delivered to a specific destination. Currently, the supported destinations are:</p> <ul> <li> <p>An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>A logical destination that belongs to a different account, for cross-account delivery.</p> </li> <li> <p>An Amazon Kinesis Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>An AWS Lambda function that belongs to the same account as the subscription filter, for same-account delivery.</p> </li> </ul> <p>There can only be one subscription filter associated with a log group. If you are updating an existing filter, you must specify the correct name in <code>filterName</code>. Otherwise, the call fails because you cannot associate a second filter with a log group.</p>",
                "operationId": "PutSubscriptionFilter",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "OperationAbortedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "destinationArn": {
                                        "description": "<p>The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:</p> <ul> <li> <p>An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.</p> </li> <li> <p>An Amazon Kinesis Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>An AWS Lambda function belonging to the same account as the subscription filter, for same-account delivery.</p> </li> </ul>",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "distribution": {
                                        "description": "The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. ",
                                        "enum": [
                                            "Random",
                                            "ByLogStream"
                                        ],
                                        "type": "string"
                                    },
                                    "filterName": {
                                        "description": "A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in <code>filterName</code>. Otherwise, the call fails because you cannot associate a second filter with a log group. To find the name of the filter currently associated with a log group, use <a>DescribeSubscriptionFilters</a>.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[^:*]*",
                                        "type": "string"
                                    },
                                    "filterPattern": {
                                        "description": "A filter pattern for subscribing to a filtered stream of log events.",
                                        "maxLength": 1024,
                                        "minLength": 0,
                                        "type": "string"
                                    },
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "roleArn": {
                                        "description": "The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "filterName",
                                    "filterPattern",
                                    "destinationArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartQuery": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Schedules a query of a log group using CloudWatch Logs Insights. You specify the log group and time range to query, and the query string to use.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\">CloudWatch Logs Insights Query Syntax</a>.</p>",
                "operationId": "StartQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "queryId": {
                                            "description": "The unique ID of the query. ",
                                            "maxLength": 256,
                                            "minLength": 0,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "MalformedQueryException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "endTime": {
                                        "description": "The end of the time range to query. The range is inclusive, so the specified end time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "limit": {
                                        "description": "The maximum number of log events to return in the query. If the query string uses the <code>fields</code> command, only the specified fields and their values are returned.",
                                        "maximum": 10000,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "logGroupName": {
                                        "description": "The log group on which to perform the query.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "queryString": {
                                        "description": "The query string to use. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\">CloudWatch Logs Insights Query Syntax</a>.",
                                        "maxLength": 2048,
                                        "minLength": 0,
                                        "type": "string"
                                    },
                                    "startTime": {
                                        "description": "The beginning of the time range to query. The range is inclusive, so the specified start time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.",
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "startTime",
                                    "endTime",
                                    "queryString"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StopQuery": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Stops a CloudWatch Logs Insights query that is in progress. If the query has already ended, the operation returns an error indicating that the specified query is not running.",
                "operationId": "StopQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "description": "This is true if the query was stopped by the <code>StopQuery</code> operation.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "queryId": {
                                        "description": "The ID number of the query to stop. If necessary, you can use <code>DescribeQueries</code> to find this ID number.",
                                        "maxLength": 256,
                                        "minLength": 0,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "queryId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#TagLogGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Adds or updates the specified tags for the specified log group.</p> <p>To list the tags for a log group, use <a>ListTagsLogGroup</a>. To remove tags, use <a>UntagLogGroup</a>.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/log-group-tagging.html\">Tag Log Groups in Amazon CloudWatch Logs</a> in the <i>Amazon CloudWatch Logs User Guide</i>.</p>",
                "operationId": "TagLogGroup",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "tags": {
                                        "description": "The key-value pairs to use for the tags.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "maxLength": 256,
                                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 50,
                                        "minItems": 1,
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "tags"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#TestMetricFilter": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Tests the filter pattern of a metric filter against a sample of log event messages. You can use this operation to validate the correctness of a metric filter pattern.",
                "operationId": "TestMetricFilter",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "matches": {
                                            "description": "The matched events.",
                                            "items": {
                                                "description": "Represents a matched event.",
                                                "properties": {
                                                    "eventMessage": {
                                                        "description": "The raw event data.",
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "eventNumber": {
                                                        "description": "The event number.",
                                                        "type": "integer"
                                                    },
                                                    "extractedValues": {
                                                        "description": "The values extracted from the event data by the filter.",
                                                        "items": {
                                                            "properties": {
                                                                "key": {
                                                                    "type": "string"
                                                                },
                                                                "value": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filterPattern": {
                                        "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                                        "maxLength": 1024,
                                        "minLength": 0,
                                        "type": "string"
                                    },
                                    "logEventMessages": {
                                        "description": "The log event messages to test.",
                                        "items": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "maxItems": 50,
                                        "minItems": 1,
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "filterPattern",
                                    "logEventMessages"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UntagLogGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Removes the specified tags from the specified log group.</p> <p>To list the tags for a log group, use <a>ListTagsLogGroup</a>. To add tags, use <a>UntagLogGroup</a>.</p>",
                "operationId": "UntagLogGroup",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logGroupName": {
                                        "description": "The name of the log group.",
                                        "maxLength": 512,
                                        "minLength": 1,
                                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                        "type": "string"
                                    },
                                    "tags": {
                                        "description": "The tag keys. The corresponding tags are removed from the log group.",
                                        "items": {
                                            "maxLength": 128,
                                            "minLength": 1,
                                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                                            "type": "string"
                                        },
                                        "minItems": 1,
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "logGroupName",
                                    "tags"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccessPolicy": {
                "minLength": 1,
                "type": "string"
            },
            "Arn": {
                "type": "string"
            },
            "AssociateKmsKeyRequest": {
                "properties": {
                    "kmsKeyId": {
                        "description": "The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\">Amazon Resource Names - AWS Key Management Service (AWS KMS)</a>.",
                        "maxLength": 256,
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName",
                    "kmsKeyId"
                ],
                "type": "object"
            },
            "CancelExportTaskRequest": {
                "properties": {
                    "taskId": {
                        "description": "The ID of the export task.",
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "taskId"
                ],
                "type": "object"
            },
            "CreateExportTaskRequest": {
                "properties": {
                    "destination": {
                        "description": "The name of S3 bucket for the exported log data. The bucket must be in the same AWS region.",
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    },
                    "destinationPrefix": {
                        "description": "The prefix used as the start of the key for every object exported. If you don't specify a value, the default is <code>exportedlogs</code>.",
                        "type": "string"
                    },
                    "from": {
                        "description": "The start time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "logStreamNamePrefix": {
                        "description": "Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "taskName": {
                        "description": "The name of the export task.",
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    },
                    "to": {
                        "description": "The end time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "logGroupName",
                    "from",
                    "to",
                    "destination"
                ],
                "type": "object"
            },
            "CreateExportTaskResponse": {
                "properties": {
                    "taskId": {
                        "description": "The ID of the export task.",
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateLogGroupRequest": {
                "properties": {
                    "kmsKeyId": {
                        "description": "The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\">Amazon Resource Names - AWS Key Management Service (AWS KMS)</a>.",
                        "maxLength": 256,
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The key-value pairs to use for the tags.",
                        "items": {
                            "properties": {
                                "key": {
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                                    "type": "string"
                                },
                                "value": {
                                    "maxLength": 256,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "CreateLogStreamRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "logStreamName": {
                        "description": "The name of the log stream.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName",
                    "logStreamName"
                ],
                "type": "object"
            },
            "DataAlreadyAcceptedException": {},
            "Days": {
                "description": "The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.",
                "type": "integer"
            },
            "DefaultValue": {
                "format": "double",
                "type": "number"
            },
            "DeleteDestinationRequest": {
                "properties": {
                    "destinationName": {
                        "description": "The name of the destination.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    }
                },
                "required": [
                    "destinationName"
                ],
                "type": "object"
            },
            "DeleteLogGroupRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "DeleteLogStreamRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "logStreamName": {
                        "description": "The name of the log stream.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName",
                    "logStreamName"
                ],
                "type": "object"
            },
            "DeleteMetricFilterRequest": {
                "properties": {
                    "filterName": {
                        "description": "The name of the metric filter.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName",
                    "filterName"
                ],
                "type": "object"
            },
            "DeleteResourcePolicyRequest": {
                "properties": {
                    "policyName": {
                        "description": "The name of the policy to be revoked. This parameter is required.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DeleteRetentionPolicyRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "DeleteSubscriptionFilterRequest": {
                "properties": {
                    "filterName": {
                        "description": "The name of the subscription filter.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName",
                    "filterName"
                ],
                "type": "object"
            },
            "Descending": {
                "type": "boolean"
            },
            "DescribeDestinationsRequest": {
                "properties": {
                    "DestinationNamePrefix": {
                        "description": "The prefix to match. If you don't specify a value, no prefix filter is applied.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeDestinationsResponse": {
                "properties": {
                    "destinations": {
                        "description": "The destinations.",
                        "items": {
                            "description": "Represents a cross-account destination that receives subscription log events.",
                            "properties": {
                                "accessPolicy": {
                                    "description": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "arn": {
                                    "description": "The ARN of this destination.",
                                    "type": "string"
                                },
                                "creationTime": {
                                    "description": "The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "destinationName": {
                                    "description": "The name of the destination.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[^:*]*",
                                    "type": "string"
                                },
                                "roleArn": {
                                    "description": "A role for impersonation, used when delivering log events to the target.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "targetArn": {
                                    "description": "The Amazon Resource Name (ARN) of the physical target to where the log events are delivered (for example, a Kinesis stream).",
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeExportTasksRequest": {
                "properties": {
                    "limit": {
                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                        "minLength": 1,
                        "type": "string"
                    },
                    "statusCode": {
                        "description": "The status code of the export task. Specifying a status code filters the results to zero or more export tasks.",
                        "enum": [
                            "CANCELLED",
                            "COMPLETED",
                            "FAILED",
                            "PENDING",
                            "PENDING_CANCEL",
                            "RUNNING"
                        ],
                        "type": "string"
                    },
                    "taskId": {
                        "description": "The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.",
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeExportTasksResponse": {
                "properties": {
                    "exportTasks": {
                        "description": "The export tasks.",
                        "items": {
                            "description": "Represents an export task.",
                            "properties": {
                                "destination": {
                                    "description": "The name of Amazon S3 bucket to which the log data was exported.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "destinationPrefix": {
                                    "description": "The prefix that was used as the start of Amazon S3 key for every object exported.",
                                    "type": "string"
                                },
                                "executionInfo": {
                                    "description": "Execution info about the export task.",
                                    "properties": {
                                        "completionTime": {
                                            "description": "The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                            "minimum": 0,
                                            "type": "integer"
                                        },
                                        "creationTime": {
                                            "description": "The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                            "minimum": 0,
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                },
                                "from": {
                                    "description": "The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not exported.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "logGroupName": {
                                    "description": "The name of the log group from which logs data was exported.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "The status of the export task.",
                                    "properties": {
                                        "code": {
                                            "description": "The status code of the export task.",
                                            "enum": [
                                                "CANCELLED",
                                                "COMPLETED",
                                                "FAILED",
                                                "PENDING",
                                                "PENDING_CANCEL",
                                                "RUNNING"
                                            ],
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "The status message related to the status code.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "taskId": {
                                    "description": "The ID of the export task.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "taskName": {
                                    "description": "The name of the export task.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "to": {
                                    "description": "The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.",
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeLimit": {
                "maximum": 50,
                "minimum": 1,
                "type": "integer"
            },
            "DescribeLogGroupsRequest": {
                "properties": {
                    "limit": {
                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "logGroupNamePrefix": {
                        "description": "The prefix to match.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeLogGroupsResponse": {
                "properties": {
                    "logGroups": {
                        "description": "The log groups.",
                        "items": {
                            "description": "Represents a log group.",
                            "properties": {
                                "arn": {
                                    "description": "The Amazon Resource Name (ARN) of the log group.",
                                    "type": "string"
                                },
                                "creationTime": {
                                    "description": "The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "kmsKeyId": {
                                    "description": "The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.",
                                    "maxLength": 256,
                                    "type": "string"
                                },
                                "logGroupName": {
                                    "description": "The name of the log group.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                    "type": "string"
                                },
                                "metricFilterCount": {
                                    "description": "The number of metric filters.",
                                    "type": "integer"
                                },
                                "retentionInDays": {
                                    "description": "The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.",
                                    "type": "integer"
                                },
                                "storedBytes": {
                                    "description": "The number of bytes stored.",
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeLogStreamsRequest": {
                "properties": {
                    "descending": {
                        "description": "If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.",
                        "type": "boolean"
                    },
                    "limit": {
                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "logStreamNamePrefix": {
                        "description": "<p>The prefix to match.</p> <p>If <code>orderBy</code> is <code>LastEventTime</code>,you cannot specify this parameter.</p>",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                        "minLength": 1,
                        "type": "string"
                    },
                    "orderBy": {
                        "description": "<p>If the value is <code>LogStreamName</code>, the results are ordered by log stream name. If the value is <code>LastEventTime</code>, the results are ordered by the event time. The default value is <code>LogStreamName</code>.</p> <p>If you order the results by event time, you cannot specify the <code>logStreamNamePrefix</code> parameter.</p> <p>lastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTimeStamp updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but may take longer in some rare situations.</p>",
                        "enum": [
                            "LogStreamName",
                            "LastEventTime"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "DescribeLogStreamsResponse": {
                "properties": {
                    "logStreams": {
                        "description": "The log streams.",
                        "items": {
                            "description": "Represents a log stream, which is a sequence of log events from a single emitter of logs.",
                            "properties": {
                                "arn": {
                                    "description": "The Amazon Resource Name (ARN) of the log stream.",
                                    "type": "string"
                                },
                                "creationTime": {
                                    "description": "The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "firstEventTimestamp": {
                                    "description": "The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "lastEventTimestamp": {
                                    "description": "The time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The <code>lastEventTime</code> value updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but may take longer in some rare situations.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "lastIngestionTime": {
                                    "description": "The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "logStreamName": {
                                    "description": "The name of the log stream.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[^:*]*",
                                    "type": "string"
                                },
                                "storedBytes": {
                                    "description": "The number of bytes stored.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "uploadSequenceToken": {
                                    "description": "The sequence token.",
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeMetricFiltersRequest": {
                "properties": {
                    "filterNamePrefix": {
                        "description": "The prefix to match.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "metricName": {
                        "description": "Filters results to include only those with the specified metric name. If you include this parameter in your request, you must also include the <code>metricNamespace</code> parameter.",
                        "maxLength": 255,
                        "pattern": "[^:*$]*",
                        "type": "string"
                    },
                    "metricNamespace": {
                        "description": "Filters results to include only those in the specified namespace. If you include this parameter in your request, you must also include the <code>metricName</code> parameter.",
                        "maxLength": 255,
                        "pattern": "[^:*$]*",
                        "type": "string"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeMetricFiltersResponse": {
                "properties": {
                    "metricFilters": {
                        "description": "The metric filters.",
                        "items": {
                            "description": "Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.",
                            "properties": {
                                "creationTime": {
                                    "description": "The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "filterName": {
                                    "description": "The name of the metric filter.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[^:*]*",
                                    "type": "string"
                                },
                                "filterPattern": {
                                    "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                                    "maxLength": 1024,
                                    "minLength": 0,
                                    "type": "string"
                                },
                                "logGroupName": {
                                    "description": "The name of the log group.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                    "type": "string"
                                },
                                "metricTransformations": {
                                    "description": "The metric transformations.",
                                    "items": {
                                        "description": "Indicates how to transform ingested log eventsto metric data in a CloudWatch metric.",
                                        "properties": {
                                            "defaultValue": {
                                                "description": "(Optional) The value to emit when a filter pattern does not match a log event. This value can be null.",
                                                "format": "double",
                                                "type": "number"
                                            },
                                            "metricName": {
                                                "description": "The name of the CloudWatch metric.",
                                                "maxLength": 255,
                                                "pattern": "[^:*$]*",
                                                "type": "string"
                                            },
                                            "metricNamespace": {
                                                "description": "The namespace of the CloudWatch metric.",
                                                "maxLength": 255,
                                                "pattern": "[^:*$]*",
                                                "type": "string"
                                            },
                                            "metricValue": {
                                                "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
                                                "maxLength": 100,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "metricName",
                                            "metricNamespace",
                                            "metricValue"
                                        ],
                                        "type": "object"
                                    },
                                    "maxItems": 1,
                                    "minItems": 1,
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeQueriesMaxResults": {
                "maximum": 1000,
                "minimum": 1,
                "type": "integer"
            },
            "DescribeQueriesRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "Limits the returned queries to only those for the specified log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "maxResults": {
                        "description": "Limits the number of returned queries to the specified number.",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "status": {
                        "description": "Limits the returned queries to only those that have the specified status. Valid values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, and <code>Scheduled</code>.",
                        "enum": [
                            "Scheduled",
                            "Running",
                            "Complete",
                            "Failed",
                            "Cancelled"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeQueriesResponse": {
                "properties": {
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "queries": {
                        "description": "The list of queries that match the request.",
                        "items": {
                            "description": "Information about one CloudWatch Logs Insights query that matches the request in a <code>DescribeQueries</code> operation. ",
                            "properties": {
                                "createTime": {
                                    "description": "The date and time that this query was created.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "logGroupName": {
                                    "description": "The name of the log group scanned by this query.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                    "type": "string"
                                },
                                "queryId": {
                                    "description": "The unique ID number of this query.",
                                    "maxLength": 256,
                                    "minLength": 0,
                                    "type": "string"
                                },
                                "queryString": {
                                    "description": "The query string used in this query.",
                                    "maxLength": 2048,
                                    "minLength": 0,
                                    "type": "string"
                                },
                                "status": {
                                    "description": "The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.",
                                    "enum": [
                                        "Scheduled",
                                        "Running",
                                        "Complete",
                                        "Failed",
                                        "Cancelled"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DescribeResourcePoliciesRequest": {
                "properties": {
                    "limit": {
                        "description": "The maximum number of resource policies to be displayed with one call of this API.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeResourcePoliciesResponse": {
                "properties": {
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "resourcePolicies": {
                        "description": "The resource policies that exist in this account.",
                        "items": {
                            "description": "A policy enabling one or more entities to put logs to a log group in this account.",
                            "properties": {
                                "lastUpdatedTime": {
                                    "description": "Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "policyDocument": {
                                    "description": "The details of the policy.",
                                    "maxLength": 5120,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "policyName": {
                                    "description": "The name of the resource policy.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DescribeSubscriptionFiltersRequest": {
                "properties": {
                    "filterNamePrefix": {
                        "description": "The prefix to match. If you don't specify a value, no prefix filter is applied.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "limit": {
                        "description": "The maximum number of items returned. If you don't specify a value, the default is up to 50 items.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "DescribeSubscriptionFiltersResponse": {
                "properties": {
                    "nextToken": {
                        "description": "The token for the next set of items to return. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "subscriptionFilters": {
                        "description": "The subscription filters.",
                        "items": {
                            "description": "Represents a subscription filter.",
                            "properties": {
                                "creationTime": {
                                    "description": "The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "destinationArn": {
                                    "description": "The Amazon Resource Name (ARN) of the destination.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "distribution": {
                                    "description": "The method used to distribute log data to the destination, which can be either random or grouped by log stream.",
                                    "enum": [
                                        "Random",
                                        "ByLogStream"
                                    ],
                                    "type": "string"
                                },
                                "filterName": {
                                    "description": "The name of the subscription filter.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[^:*]*",
                                    "type": "string"
                                },
                                "filterPattern": {
                                    "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                                    "maxLength": 1024,
                                    "minLength": 0,
                                    "type": "string"
                                },
                                "logGroupName": {
                                    "description": "The name of the log group.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                    "type": "string"
                                },
                                "roleArn": {
                                    "description": "<p/>",
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Destination": {
                "description": "Represents a cross-account destination that receives subscription log events.",
                "properties": {
                    "accessPolicy": {
                        "description": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "arn": {
                        "description": "The ARN of this destination.",
                        "type": "string"
                    },
                    "creationTime": {
                        "description": "The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "destinationName": {
                        "description": "The name of the destination.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "roleArn": {
                        "description": "A role for impersonation, used when delivering log events to the target.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "targetArn": {
                        "description": "The Amazon Resource Name (ARN) of the physical target to where the log events are delivered (for example, a Kinesis stream).",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DestinationArn": {
                "minLength": 1,
                "type": "string"
            },
            "DestinationName": {
                "maxLength": 512,
                "minLength": 1,
                "pattern": "[^:*]*",
                "type": "string"
            },
            "Destinations": {
                "items": {
                    "description": "Represents a cross-account destination that receives subscription log events.",
                    "properties": {
                        "accessPolicy": {
                            "description": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "arn": {
                            "description": "The ARN of this destination.",
                            "type": "string"
                        },
                        "creationTime": {
                            "description": "The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "destinationName": {
                            "description": "The name of the destination.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[^:*]*",
                            "type": "string"
                        },
                        "roleArn": {
                            "description": "A role for impersonation, used when delivering log events to the target.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "targetArn": {
                            "description": "The Amazon Resource Name (ARN) of the physical target to where the log events are delivered (for example, a Kinesis stream).",
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "DisassociateKmsKeyRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "Distribution": {
                "description": "The method used to distribute log data to the destination, which can be either random or grouped by log stream.",
                "enum": [
                    "Random",
                    "ByLogStream"
                ],
                "type": "string"
            },
            "EventId": {
                "type": "string"
            },
            "EventMessage": {
                "minLength": 1,
                "type": "string"
            },
            "EventNumber": {
                "type": "integer"
            },
            "EventsLimit": {
                "maximum": 10000,
                "minimum": 1,
                "type": "integer"
            },
            "ExportDestinationBucket": {
                "maxLength": 512,
                "minLength": 1,
                "type": "string"
            },
            "ExportDestinationPrefix": {
                "type": "string"
            },
            "ExportTask": {
                "description": "Represents an export task.",
                "properties": {
                    "destination": {
                        "description": "The name of Amazon S3 bucket to which the log data was exported.",
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    },
                    "destinationPrefix": {
                        "description": "The prefix that was used as the start of Amazon S3 key for every object exported.",
                        "type": "string"
                    },
                    "executionInfo": {
                        "description": "Execution info about the export task.",
                        "properties": {
                            "completionTime": {
                                "description": "The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "creationTime": {
                                "description": "The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "from": {
                        "description": "The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not exported.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The name of the log group from which logs data was exported.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the export task.",
                        "properties": {
                            "code": {
                                "description": "The status code of the export task.",
                                "enum": [
                                    "CANCELLED",
                                    "COMPLETED",
                                    "FAILED",
                                    "PENDING",
                                    "PENDING_CANCEL",
                                    "RUNNING"
                                ],
                                "type": "string"
                            },
                            "message": {
                                "description": "The status message related to the status code.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "taskId": {
                        "description": "The ID of the export task.",
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    },
                    "taskName": {
                        "description": "The name of the export task.",
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    },
                    "to": {
                        "description": "The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ExportTaskExecutionInfo": {
                "description": "Represents the status of an export task.",
                "properties": {
                    "completionTime": {
                        "description": "The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "creationTime": {
                        "description": "The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ExportTaskId": {
                "maxLength": 512,
                "minLength": 1,
                "type": "string"
            },
            "ExportTaskName": {
                "maxLength": 512,
                "minLength": 1,
                "type": "string"
            },
            "ExportTaskStatus": {
                "description": "Represents the status of an export task.",
                "properties": {
                    "code": {
                        "description": "The status code of the export task.",
                        "enum": [
                            "CANCELLED",
                            "COMPLETED",
                            "FAILED",
                            "PENDING",
                            "PENDING_CANCEL",
                            "RUNNING"
                        ],
                        "type": "string"
                    },
                    "message": {
                        "description": "The status message related to the status code.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ExportTaskStatusCode": {
                "enum": [
                    "CANCELLED",
                    "COMPLETED",
                    "FAILED",
                    "PENDING",
                    "PENDING_CANCEL",
                    "RUNNING"
                ],
                "type": "string"
            },
            "ExportTaskStatusMessage": {
                "type": "string"
            },
            "ExportTasks": {
                "items": {
                    "description": "Represents an export task.",
                    "properties": {
                        "destination": {
                            "description": "The name of Amazon S3 bucket to which the log data was exported.",
                            "maxLength": 512,
                            "minLength": 1,
                            "type": "string"
                        },
                        "destinationPrefix": {
                            "description": "The prefix that was used as the start of Amazon S3 key for every object exported.",
                            "type": "string"
                        },
                        "executionInfo": {
                            "description": "Execution info about the export task.",
                            "properties": {
                                "completionTime": {
                                    "description": "The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "creationTime": {
                                    "description": "The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "from": {
                            "description": "The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not exported.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "logGroupName": {
                            "description": "The name of the log group from which logs data was exported.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                            "type": "string"
                        },
                        "status": {
                            "description": "The status of the export task.",
                            "properties": {
                                "code": {
                                    "description": "The status code of the export task.",
                                    "enum": [
                                        "CANCELLED",
                                        "COMPLETED",
                                        "FAILED",
                                        "PENDING",
                                        "PENDING_CANCEL",
                                        "RUNNING"
                                    ],
                                    "type": "string"
                                },
                                "message": {
                                    "description": "The status message related to the status code.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "taskId": {
                            "description": "The ID of the export task.",
                            "maxLength": 512,
                            "minLength": 1,
                            "type": "string"
                        },
                        "taskName": {
                            "description": "The name of the export task.",
                            "maxLength": 512,
                            "minLength": 1,
                            "type": "string"
                        },
                        "to": {
                            "description": "The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.",
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ExtractedValues": {
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "Field": {
                "type": "string"
            },
            "FilterCount": {
                "type": "integer"
            },
            "FilterLogEventsRequest": {
                "properties": {
                    "endTime": {
                        "description": "The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "filterPattern": {
                        "description": "<p>The filter pattern to use. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html\">Filter and Pattern Syntax</a>.</p> <p>If not provided, all the events are matched.</p>",
                        "maxLength": 1024,
                        "minLength": 0,
                        "type": "string"
                    },
                    "interleaved": {
                        "description": "If the value is true, the operation makes a best effort to provide responses that contain events from multiple log streams within the log group, interleaved in a single response. If the value is false, all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. The default is false.",
                        "type": "boolean"
                    },
                    "limit": {
                        "description": "The maximum number of events to return. The default is 10,000 events.",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The name of the log group to search.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "logStreamNamePrefix": {
                        "description": "<p>Filters the results to include only events from log streams that have names starting with this prefix.</p> <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, but the value for <code>logStreamNamePrefix</code> does not match any log stream names specified in <code>logStreamNames</code>, the action returns an <code>InvalidParameterException</code> error.</p>",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "logStreamNames": {
                        "description": "<p>Filters the results to only logs from the log streams in this list.</p> <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, the action returns an <code>InvalidParameterException</code> error.</p>",
                        "items": {
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[^:*]*",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The token for the next set of events to return. (You received this token from a previous call.)",
                        "minLength": 1,
                        "type": "string"
                    },
                    "startTime": {
                        "description": "The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not returned.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "FilterLogEventsResponse": {
                "properties": {
                    "events": {
                        "description": "The matched events.",
                        "items": {
                            "description": "Represents a matched event.",
                            "properties": {
                                "eventId": {
                                    "description": "The ID of the event.",
                                    "type": "string"
                                },
                                "ingestionTime": {
                                    "description": "The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "logStreamName": {
                                    "description": "The name of the log stream to which this event belongs.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[^:*]*",
                                    "type": "string"
                                },
                                "message": {
                                    "description": "The data contained in the log event.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "timestamp": {
                                    "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The token to use when requesting the next set of items. The token expires after 24 hours.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "searchedLogStreams": {
                        "description": "Indicates which log streams have been searched and whether each has been searched completely.",
                        "items": {
                            "description": "Represents the search status of a log stream.",
                            "properties": {
                                "logStreamName": {
                                    "description": "The name of the log stream.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[^:*]*",
                                    "type": "string"
                                },
                                "searchedCompletely": {
                                    "description": "Indicates whether all the events in this log stream were searched.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "FilterName": {
                "maxLength": 512,
                "minLength": 1,
                "pattern": "[^:*]*",
                "type": "string"
            },
            "FilterPattern": {
                "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                "maxLength": 1024,
                "minLength": 0,
                "type": "string"
            },
            "FilteredLogEvent": {
                "description": "Represents a matched event.",
                "properties": {
                    "eventId": {
                        "description": "The ID of the event.",
                        "type": "string"
                    },
                    "ingestionTime": {
                        "description": "The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "logStreamName": {
                        "description": "The name of the log stream to which this event belongs.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "message": {
                        "description": "The data contained in the log event.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "FilteredLogEvents": {
                "items": {
                    "description": "Represents a matched event.",
                    "properties": {
                        "eventId": {
                            "description": "The ID of the event.",
                            "type": "string"
                        },
                        "ingestionTime": {
                            "description": "The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "logStreamName": {
                            "description": "The name of the log stream to which this event belongs.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[^:*]*",
                            "type": "string"
                        },
                        "message": {
                            "description": "The data contained in the log event.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "timestamp": {
                            "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "GetLogEventsRequest": {
                "properties": {
                    "endTime": {
                        "description": "The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "limit": {
                        "description": "The maximum number of log events returned. If you don't specify a value, the maximum is as many log events as can fit in a response size of 1 MB, up to 10,000 log events.",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "logStreamName": {
                        "description": "The name of the log stream.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "nextToken": {
                        "description": "The token for the next set of items to return. (You received this token from a previous call.)",
                        "minLength": 1,
                        "type": "string"
                    },
                    "startFromHead": {
                        "description": "If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false.",
                        "type": "boolean"
                    },
                    "startTime": {
                        "description": "The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "logGroupName",
                    "logStreamName"
                ],
                "type": "object"
            },
            "GetLogEventsResponse": {
                "properties": {
                    "events": {
                        "description": "The events.",
                        "items": {
                            "description": "Represents a log event.",
                            "properties": {
                                "ingestionTime": {
                                    "description": "The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "message": {
                                    "description": "The data contained in the log event.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "timestamp": {
                                    "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextBackwardToken": {
                        "description": "The token for the next set of items in the backward direction. The token expires after 24 hours. This token will never be null. If you have reached the end of the stream, it will return the same token you passed in.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "nextForwardToken": {
                        "description": "The token for the next set of items in the forward direction. The token expires after 24 hours. If you have reached the end of the stream, it will return the same token you passed in.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetLogGroupFieldsRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group to search.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "time": {
                        "description": "<p>The time to set as the center of the query. If you specify <code>time</code>, the 8 minutes before and 8 minutes after this time are searched. If you omit <code>time</code>, the past 15 minutes are queried.</p> <p>The <code>time</code> value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.</p>",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "GetLogGroupFieldsResponse": {
                "properties": {
                    "logGroupFields": {
                        "description": "The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.",
                        "items": {
                            "description": "The fields contained in log events found by a <code>GetLogGroupFields</code> operation, along with the percentage of queried log events in which each field appears.",
                            "properties": {
                                "name": {
                                    "description": "The name of a log field.",
                                    "type": "string"
                                },
                                "percent": {
                                    "description": "The percentage of log events queried that contained the field.",
                                    "maximum": 100,
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GetLogRecordRequest": {
                "properties": {
                    "logRecordPointer": {
                        "description": "The pointer corresponding to the log event record you want to retrieve. You get this from the response of a <code>GetQueryResults</code> operation. In that response, the value of the <code>@ptr</code> field for a log event is the value to use as <code>logRecordPointer</code> to retrieve that complete log event record.",
                        "type": "string"
                    }
                },
                "required": [
                    "logRecordPointer"
                ],
                "type": "object"
            },
            "GetLogRecordResponse": {
                "properties": {
                    "logRecord": {
                        "description": "The requested log event, as a JSON string.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GetQueryResultsRequest": {
                "properties": {
                    "queryId": {
                        "description": "The ID number of the query.",
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    }
                },
                "required": [
                    "queryId"
                ],
                "type": "object"
            },
            "GetQueryResultsResponse": {
                "properties": {
                    "results": {
                        "description": "<p>The log events that matched the query criteria during the most recent time it ran.</p> <p>The <code>results</code> value is an array of arrays. Each log event is one object in the top-level array. Each of these log event objects is an array of <code>field</code>/<code>value</code> pairs.</p>",
                        "items": {
                            "items": {
                                "description": "Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.",
                                "properties": {
                                    "field": {
                                        "description": "The log event field.",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "The value of this field.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "type": "array"
                    },
                    "statistics": {
                        "description": "Includes the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.",
                        "properties": {
                            "bytesScanned": {
                                "description": "The total number of bytes in the log events scanned during the query.",
                                "format": "double",
                                "type": "number"
                            },
                            "recordsMatched": {
                                "description": "The number of log events that matched the query string.",
                                "format": "double",
                                "type": "number"
                            },
                            "recordsScanned": {
                                "description": "The total number of log events scanned during the query.",
                                "format": "double",
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "status": {
                        "description": "The status of the most recent running of the query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.",
                        "enum": [
                            "Scheduled",
                            "Running",
                            "Complete",
                            "Failed",
                            "Cancelled"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InputLogEvent": {
                "description": "Represents a log event, which is a record of activity that was recorded by the application or resource being monitored.",
                "properties": {
                    "message": {
                        "description": "The raw event message.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "timestamp",
                    "message"
                ],
                "type": "object"
            },
            "InputLogEvents": {
                "items": {
                    "description": "Represents a log event, which is a record of activity that was recorded by the application or resource being monitored.",
                    "properties": {
                        "message": {
                            "description": "The raw event message.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "timestamp": {
                            "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "required": [
                        "timestamp",
                        "message"
                    ],
                    "type": "object"
                },
                "maxItems": 10000,
                "minItems": 1,
                "type": "array"
            },
            "InputLogStreamNames": {
                "items": {
                    "maxLength": 512,
                    "minLength": 1,
                    "pattern": "[^:*]*",
                    "type": "string"
                },
                "maxItems": 100,
                "minItems": 1,
                "type": "array"
            },
            "Interleaved": {
                "type": "boolean"
            },
            "InvalidOperationException": {},
            "InvalidParameterException": {},
            "InvalidSequenceTokenException": {},
            "KmsKeyId": {
                "maxLength": 256,
                "type": "string"
            },
            "LimitExceededException": {},
            "ListTagsLogGroupRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName"
                ],
                "type": "object"
            },
            "ListTagsLogGroupResponse": {
                "properties": {
                    "tags": {
                        "description": "The tags for the log group.",
                        "items": {
                            "properties": {
                                "key": {
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                                    "type": "string"
                                },
                                "value": {
                                    "maxLength": 256,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "LogEventIndex": {
                "type": "integer"
            },
            "LogGroup": {
                "description": "Represents a log group.",
                "properties": {
                    "arn": {
                        "description": "The Amazon Resource Name (ARN) of the log group.",
                        "type": "string"
                    },
                    "creationTime": {
                        "description": "The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "kmsKeyId": {
                        "description": "The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.",
                        "maxLength": 256,
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "metricFilterCount": {
                        "description": "The number of metric filters.",
                        "type": "integer"
                    },
                    "retentionInDays": {
                        "description": "The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.",
                        "type": "integer"
                    },
                    "storedBytes": {
                        "description": "The number of bytes stored.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LogGroupField": {
                "description": "The fields contained in log events found by a <code>GetLogGroupFields</code> operation, along with the percentage of queried log events in which each field appears.",
                "properties": {
                    "name": {
                        "description": "The name of a log field.",
                        "type": "string"
                    },
                    "percent": {
                        "description": "The percentage of log events queried that contained the field.",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LogGroupFieldList": {
                "items": {
                    "description": "The fields contained in log events found by a <code>GetLogGroupFields</code> operation, along with the percentage of queried log events in which each field appears.",
                    "properties": {
                        "name": {
                            "description": "The name of a log field.",
                            "type": "string"
                        },
                        "percent": {
                            "description": "The percentage of log events queried that contained the field.",
                            "maximum": 100,
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "LogGroupName": {
                "maxLength": 512,
                "minLength": 1,
                "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                "type": "string"
            },
            "LogGroups": {
                "items": {
                    "description": "Represents a log group.",
                    "properties": {
                        "arn": {
                            "description": "The Amazon Resource Name (ARN) of the log group.",
                            "type": "string"
                        },
                        "creationTime": {
                            "description": "The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "kmsKeyId": {
                            "description": "The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.",
                            "maxLength": 256,
                            "type": "string"
                        },
                        "logGroupName": {
                            "description": "The name of the log group.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                            "type": "string"
                        },
                        "metricFilterCount": {
                            "description": "The number of metric filters.",
                            "type": "integer"
                        },
                        "retentionInDays": {
                            "description": "The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.",
                            "type": "integer"
                        },
                        "storedBytes": {
                            "description": "The number of bytes stored.",
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "LogRecord": {
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "LogRecordPointer": {
                "type": "string"
            },
            "LogStream": {
                "description": "Represents a log stream, which is a sequence of log events from a single emitter of logs.",
                "properties": {
                    "arn": {
                        "description": "The Amazon Resource Name (ARN) of the log stream.",
                        "type": "string"
                    },
                    "creationTime": {
                        "description": "The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "firstEventTimestamp": {
                        "description": "The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "lastEventTimestamp": {
                        "description": "The time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The <code>lastEventTime</code> value updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but may take longer in some rare situations.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "lastIngestionTime": {
                        "description": "The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "logStreamName": {
                        "description": "The name of the log stream.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "storedBytes": {
                        "description": "The number of bytes stored.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "uploadSequenceToken": {
                        "description": "The sequence token.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LogStreamName": {
                "maxLength": 512,
                "minLength": 1,
                "pattern": "[^:*]*",
                "type": "string"
            },
            "LogStreamSearchedCompletely": {
                "type": "boolean"
            },
            "LogStreams": {
                "items": {
                    "description": "Represents a log stream, which is a sequence of log events from a single emitter of logs.",
                    "properties": {
                        "arn": {
                            "description": "The Amazon Resource Name (ARN) of the log stream.",
                            "type": "string"
                        },
                        "creationTime": {
                            "description": "The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "firstEventTimestamp": {
                            "description": "The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "lastEventTimestamp": {
                            "description": "The time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The <code>lastEventTime</code> value updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but may take longer in some rare situations.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "lastIngestionTime": {
                            "description": "The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "logStreamName": {
                            "description": "The name of the log stream.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[^:*]*",
                            "type": "string"
                        },
                        "storedBytes": {
                            "description": "The number of bytes stored.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "uploadSequenceToken": {
                            "description": "The sequence token.",
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "MalformedQueryException": {},
            "MetricFilter": {
                "description": "Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.",
                "properties": {
                    "creationTime": {
                        "description": "The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "filterName": {
                        "description": "The name of the metric filter.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "filterPattern": {
                        "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                        "maxLength": 1024,
                        "minLength": 0,
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "metricTransformations": {
                        "description": "The metric transformations.",
                        "items": {
                            "description": "Indicates how to transform ingested log eventsto metric data in a CloudWatch metric.",
                            "properties": {
                                "defaultValue": {
                                    "description": "(Optional) The value to emit when a filter pattern does not match a log event. This value can be null.",
                                    "format": "double",
                                    "type": "number"
                                },
                                "metricName": {
                                    "description": "The name of the CloudWatch metric.",
                                    "maxLength": 255,
                                    "pattern": "[^:*$]*",
                                    "type": "string"
                                },
                                "metricNamespace": {
                                    "description": "The namespace of the CloudWatch metric.",
                                    "maxLength": 255,
                                    "pattern": "[^:*$]*",
                                    "type": "string"
                                },
                                "metricValue": {
                                    "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
                                    "maxLength": 100,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "metricName",
                                "metricNamespace",
                                "metricValue"
                            ],
                            "type": "object"
                        },
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "MetricFilterMatchRecord": {
                "description": "Represents a matched event.",
                "properties": {
                    "eventMessage": {
                        "description": "The raw event data.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "eventNumber": {
                        "description": "The event number.",
                        "type": "integer"
                    },
                    "extractedValues": {
                        "description": "The values extracted from the event data by the filter.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "MetricFilterMatches": {
                "items": {
                    "description": "Represents a matched event.",
                    "properties": {
                        "eventMessage": {
                            "description": "The raw event data.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "eventNumber": {
                            "description": "The event number.",
                            "type": "integer"
                        },
                        "extractedValues": {
                            "description": "The values extracted from the event data by the filter.",
                            "items": {
                                "properties": {
                                    "key": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "MetricFilters": {
                "items": {
                    "description": "Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.",
                    "properties": {
                        "creationTime": {
                            "description": "The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "filterName": {
                            "description": "The name of the metric filter.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[^:*]*",
                            "type": "string"
                        },
                        "filterPattern": {
                            "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                            "maxLength": 1024,
                            "minLength": 0,
                            "type": "string"
                        },
                        "logGroupName": {
                            "description": "The name of the log group.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                            "type": "string"
                        },
                        "metricTransformations": {
                            "description": "The metric transformations.",
                            "items": {
                                "description": "Indicates how to transform ingested log eventsto metric data in a CloudWatch metric.",
                                "properties": {
                                    "defaultValue": {
                                        "description": "(Optional) The value to emit when a filter pattern does not match a log event. This value can be null.",
                                        "format": "double",
                                        "type": "number"
                                    },
                                    "metricName": {
                                        "description": "The name of the CloudWatch metric.",
                                        "maxLength": 255,
                                        "pattern": "[^:*$]*",
                                        "type": "string"
                                    },
                                    "metricNamespace": {
                                        "description": "The namespace of the CloudWatch metric.",
                                        "maxLength": 255,
                                        "pattern": "[^:*$]*",
                                        "type": "string"
                                    },
                                    "metricValue": {
                                        "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
                                        "maxLength": 100,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "metricName",
                                    "metricNamespace",
                                    "metricValue"
                                ],
                                "type": "object"
                            },
                            "maxItems": 1,
                            "minItems": 1,
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "MetricName": {
                "description": "The name of the CloudWatch metric to which the monitored log information should be published. For example, you may publish to a metric called ErrorCount.",
                "maxLength": 255,
                "pattern": "[^:*$]*",
                "type": "string"
            },
            "MetricNamespace": {
                "maxLength": 255,
                "pattern": "[^:*$]*",
                "type": "string"
            },
            "MetricTransformation": {
                "description": "Indicates how to transform ingested log eventsto metric data in a CloudWatch metric.",
                "properties": {
                    "defaultValue": {
                        "description": "(Optional) The value to emit when a filter pattern does not match a log event. This value can be null.",
                        "format": "double",
                        "type": "number"
                    },
                    "metricName": {
                        "description": "The name of the CloudWatch metric.",
                        "maxLength": 255,
                        "pattern": "[^:*$]*",
                        "type": "string"
                    },
                    "metricNamespace": {
                        "description": "The namespace of the CloudWatch metric.",
                        "maxLength": 255,
                        "pattern": "[^:*$]*",
                        "type": "string"
                    },
                    "metricValue": {
                        "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
                        "maxLength": 100,
                        "type": "string"
                    }
                },
                "required": [
                    "metricName",
                    "metricNamespace",
                    "metricValue"
                ],
                "type": "object"
            },
            "MetricTransformations": {
                "items": {
                    "description": "Indicates how to transform ingested log eventsto metric data in a CloudWatch metric.",
                    "properties": {
                        "defaultValue": {
                            "description": "(Optional) The value to emit when a filter pattern does not match a log event. This value can be null.",
                            "format": "double",
                            "type": "number"
                        },
                        "metricName": {
                            "description": "The name of the CloudWatch metric.",
                            "maxLength": 255,
                            "pattern": "[^:*$]*",
                            "type": "string"
                        },
                        "metricNamespace": {
                            "description": "The namespace of the CloudWatch metric.",
                            "maxLength": 255,
                            "pattern": "[^:*$]*",
                            "type": "string"
                        },
                        "metricValue": {
                            "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
                            "maxLength": 100,
                            "type": "string"
                        }
                    },
                    "required": [
                        "metricName",
                        "metricNamespace",
                        "metricValue"
                    ],
                    "type": "object"
                },
                "maxItems": 1,
                "minItems": 1,
                "type": "array"
            },
            "MetricValue": {
                "description": "The value to publish to the CloudWatch metric. For example, if you're counting the occurrences of a term like \"Error\", the value is \"1\" for each occurrence. If you're counting the bytes transferred, the value is the value in the log event.",
                "maxLength": 100,
                "type": "string"
            },
            "NextToken": {
                "description": "The token for the next set of items to return. The token expires after 24 hours.",
                "minLength": 1,
                "type": "string"
            },
            "OperationAbortedException": {},
            "OrderBy": {
                "enum": [
                    "LogStreamName",
                    "LastEventTime"
                ],
                "type": "string"
            },
            "OutputLogEvent": {
                "description": "Represents a log event.",
                "properties": {
                    "ingestionTime": {
                        "description": "The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "message": {
                        "description": "The data contained in the log event.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "OutputLogEvents": {
                "items": {
                    "description": "Represents a log event.",
                    "properties": {
                        "ingestionTime": {
                            "description": "The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "message": {
                            "description": "The data contained in the log event.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "timestamp": {
                            "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "Percentage": {
                "maximum": 100,
                "minimum": 0,
                "type": "integer"
            },
            "PolicyDocument": {
                "maxLength": 5120,
                "minLength": 1,
                "type": "string"
            },
            "PolicyName": {
                "type": "string"
            },
            "PutDestinationPolicyRequest": {
                "properties": {
                    "accessPolicy": {
                        "description": "An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "destinationName": {
                        "description": "A name for an existing destination.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    }
                },
                "required": [
                    "destinationName",
                    "accessPolicy"
                ],
                "type": "object"
            },
            "PutDestinationRequest": {
                "properties": {
                    "destinationName": {
                        "description": "A name for the destination.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "roleArn": {
                        "description": "The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon Kinesis PutRecord operation on the destination stream.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "targetArn": {
                        "description": "The ARN of an Amazon Kinesis stream to which to deliver matching log events.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "destinationName",
                    "targetArn",
                    "roleArn"
                ],
                "type": "object"
            },
            "PutDestinationResponse": {
                "properties": {
                    "destination": {
                        "description": "The destination.",
                        "properties": {
                            "accessPolicy": {
                                "description": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination.",
                                "minLength": 1,
                                "type": "string"
                            },
                            "arn": {
                                "description": "The ARN of this destination.",
                                "type": "string"
                            },
                            "creationTime": {
                                "description": "The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "destinationName": {
                                "description": "The name of the destination.",
                                "maxLength": 512,
                                "minLength": 1,
                                "pattern": "[^:*]*",
                                "type": "string"
                            },
                            "roleArn": {
                                "description": "A role for impersonation, used when delivering log events to the target.",
                                "minLength": 1,
                                "type": "string"
                            },
                            "targetArn": {
                                "description": "The Amazon Resource Name (ARN) of the physical target to where the log events are delivered (for example, a Kinesis stream).",
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PutLogEventsRequest": {
                "properties": {
                    "logEvents": {
                        "description": "The log events.",
                        "items": {
                            "description": "Represents a log event, which is a record of activity that was recorded by the application or resource being monitored.",
                            "properties": {
                                "message": {
                                    "description": "The raw event message.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "timestamp": {
                                    "description": "The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "timestamp",
                                "message"
                            ],
                            "type": "object"
                        },
                        "maxItems": 10000,
                        "minItems": 1,
                        "type": "array"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "logStreamName": {
                        "description": "The name of the log stream.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "sequenceToken": {
                        "description": "The sequence token obtained from the response of the previous <code>PutLogEvents</code> call. An upload in a newly created log stream does not require a sequence token. You can also get the sequence token using <a>DescribeLogStreams</a>. If you call <code>PutLogEvents</code> twice within a narrow time period using the same value for <code>sequenceToken</code>, both calls may be successful, or one may be rejected.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName",
                    "logStreamName",
                    "logEvents"
                ],
                "type": "object"
            },
            "PutLogEventsResponse": {
                "properties": {
                    "nextSequenceToken": {
                        "description": "The next sequence token.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "rejectedLogEventsInfo": {
                        "description": "The rejected events.",
                        "properties": {
                            "expiredLogEventEndIndex": {
                                "description": "The expired log events.",
                                "type": "integer"
                            },
                            "tooNewLogEventStartIndex": {
                                "description": "The log events that are too new.",
                                "type": "integer"
                            },
                            "tooOldLogEventEndIndex": {
                                "description": "The log events that are too old.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PutMetricFilterRequest": {
                "properties": {
                    "filterName": {
                        "description": "A name for the metric filter.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "filterPattern": {
                        "description": "A filter pattern for extracting metric data out of ingested log events.",
                        "maxLength": 1024,
                        "minLength": 0,
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "metricTransformations": {
                        "description": "A collection of information that defines how metric data gets emitted.",
                        "items": {
                            "description": "Indicates how to transform ingested log eventsto metric data in a CloudWatch metric.",
                            "properties": {
                                "defaultValue": {
                                    "description": "(Optional) The value to emit when a filter pattern does not match a log event. This value can be null.",
                                    "format": "double",
                                    "type": "number"
                                },
                                "metricName": {
                                    "description": "The name of the CloudWatch metric.",
                                    "maxLength": 255,
                                    "pattern": "[^:*$]*",
                                    "type": "string"
                                },
                                "metricNamespace": {
                                    "description": "The namespace of the CloudWatch metric.",
                                    "maxLength": 255,
                                    "pattern": "[^:*$]*",
                                    "type": "string"
                                },
                                "metricValue": {
                                    "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
                                    "maxLength": 100,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "metricName",
                                "metricNamespace",
                                "metricValue"
                            ],
                            "type": "object"
                        },
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "logGroupName",
                    "filterName",
                    "filterPattern",
                    "metricTransformations"
                ],
                "type": "object"
            },
            "PutResourcePolicyRequest": {
                "properties": {
                    "policyDocument": {
                        "description": "<p>Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string.</p> <p>The following example creates a resource policy enabling the Route 53 service to put DNS query logs in to the specified log group. Replace \"logArn\" with the ARN of your CloudWatch Logs resource, such as a log group or log stream.</p> <p> <code>{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"Route53LogsToCloudWatchLogs\", \"Effect\": \"Allow\", \"Principal\": { \"Service\": [ \"route53.amazonaws.com\" ] }, \"Action\":\"logs:PutLogEvents\", \"Resource\": \"logArn\" } ] } </code> </p>",
                        "maxLength": 5120,
                        "minLength": 1,
                        "type": "string"
                    },
                    "policyName": {
                        "description": "Name of the new policy. This parameter is required.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PutResourcePolicyResponse": {
                "properties": {
                    "resourcePolicy": {
                        "description": "The new policy.",
                        "properties": {
                            "lastUpdatedTime": {
                                "description": "Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "policyDocument": {
                                "description": "The details of the policy.",
                                "maxLength": 5120,
                                "minLength": 1,
                                "type": "string"
                            },
                            "policyName": {
                                "description": "The name of the resource policy.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PutRetentionPolicyRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "retentionInDays": {
                        "description": "The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.",
                        "type": "integer"
                    }
                },
                "required": [
                    "logGroupName",
                    "retentionInDays"
                ],
                "type": "object"
            },
            "PutSubscriptionFilterRequest": {
                "properties": {
                    "destinationArn": {
                        "description": "<p>The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:</p> <ul> <li> <p>An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.</p> </li> <li> <p>An Amazon Kinesis Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>An AWS Lambda function belonging to the same account as the subscription filter, for same-account delivery.</p> </li> </ul>",
                        "minLength": 1,
                        "type": "string"
                    },
                    "distribution": {
                        "description": "The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. ",
                        "enum": [
                            "Random",
                            "ByLogStream"
                        ],
                        "type": "string"
                    },
                    "filterName": {
                        "description": "A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in <code>filterName</code>. Otherwise, the call fails because you cannot associate a second filter with a log group. To find the name of the filter currently associated with a log group, use <a>DescribeSubscriptionFilters</a>.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "filterPattern": {
                        "description": "A filter pattern for subscribing to a filtered stream of log events.",
                        "maxLength": 1024,
                        "minLength": 0,
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "roleArn": {
                        "description": "The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "logGroupName",
                    "filterName",
                    "filterPattern",
                    "destinationArn"
                ],
                "type": "object"
            },
            "QueryId": {
                "maxLength": 256,
                "minLength": 0,
                "type": "string"
            },
            "QueryInfo": {
                "description": "Information about one CloudWatch Logs Insights query that matches the request in a <code>DescribeQueries</code> operation. ",
                "properties": {
                    "createTime": {
                        "description": "The date and time that this query was created.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The name of the log group scanned by this query.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "queryId": {
                        "description": "The unique ID number of this query.",
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    },
                    "queryString": {
                        "description": "The query string used in this query.",
                        "maxLength": 2048,
                        "minLength": 0,
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.",
                        "enum": [
                            "Scheduled",
                            "Running",
                            "Complete",
                            "Failed",
                            "Cancelled"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "QueryInfoList": {
                "items": {
                    "description": "Information about one CloudWatch Logs Insights query that matches the request in a <code>DescribeQueries</code> operation. ",
                    "properties": {
                        "createTime": {
                            "description": "The date and time that this query was created.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "logGroupName": {
                            "description": "The name of the log group scanned by this query.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                            "type": "string"
                        },
                        "queryId": {
                            "description": "The unique ID number of this query.",
                            "maxLength": 256,
                            "minLength": 0,
                            "type": "string"
                        },
                        "queryString": {
                            "description": "The query string used in this query.",
                            "maxLength": 2048,
                            "minLength": 0,
                            "type": "string"
                        },
                        "status": {
                            "description": "The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.",
                            "enum": [
                                "Scheduled",
                                "Running",
                                "Complete",
                                "Failed",
                                "Cancelled"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "QueryResults": {
                "items": {
                    "items": {
                        "description": "Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.",
                        "properties": {
                            "field": {
                                "description": "The log event field.",
                                "type": "string"
                            },
                            "value": {
                                "description": "The value of this field.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "type": "array"
            },
            "QueryStatistics": {
                "description": "Contains the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.",
                "properties": {
                    "bytesScanned": {
                        "description": "The total number of bytes in the log events scanned during the query.",
                        "format": "double",
                        "type": "number"
                    },
                    "recordsMatched": {
                        "description": "The number of log events that matched the query string.",
                        "format": "double",
                        "type": "number"
                    },
                    "recordsScanned": {
                        "description": "The total number of log events scanned during the query.",
                        "format": "double",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "QueryStatus": {
                "enum": [
                    "Scheduled",
                    "Running",
                    "Complete",
                    "Failed",
                    "Cancelled"
                ],
                "type": "string"
            },
            "QueryString": {
                "maxLength": 2048,
                "minLength": 0,
                "type": "string"
            },
            "RejectedLogEventsInfo": {
                "description": "Represents the rejected events.",
                "properties": {
                    "expiredLogEventEndIndex": {
                        "description": "The expired log events.",
                        "type": "integer"
                    },
                    "tooNewLogEventStartIndex": {
                        "description": "The log events that are too new.",
                        "type": "integer"
                    },
                    "tooOldLogEventEndIndex": {
                        "description": "The log events that are too old.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ResourceAlreadyExistsException": {},
            "ResourceNotFoundException": {},
            "ResourcePolicies": {
                "items": {
                    "description": "A policy enabling one or more entities to put logs to a log group in this account.",
                    "properties": {
                        "lastUpdatedTime": {
                            "description": "Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "policyDocument": {
                            "description": "The details of the policy.",
                            "maxLength": 5120,
                            "minLength": 1,
                            "type": "string"
                        },
                        "policyName": {
                            "description": "The name of the resource policy.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ResourcePolicy": {
                "description": "A policy enabling one or more entities to put logs to a log group in this account.",
                "properties": {
                    "lastUpdatedTime": {
                        "description": "Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "policyDocument": {
                        "description": "The details of the policy.",
                        "maxLength": 5120,
                        "minLength": 1,
                        "type": "string"
                    },
                    "policyName": {
                        "description": "The name of the resource policy.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ResultField": {
                "description": "Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.",
                "properties": {
                    "field": {
                        "description": "The log event field.",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of this field.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ResultRows": {
                "items": {
                    "description": "Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.",
                    "properties": {
                        "field": {
                            "description": "The log event field.",
                            "type": "string"
                        },
                        "value": {
                            "description": "The value of this field.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "RoleArn": {
                "minLength": 1,
                "type": "string"
            },
            "SearchedLogStream": {
                "description": "Represents the search status of a log stream.",
                "properties": {
                    "logStreamName": {
                        "description": "The name of the log stream.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "searchedCompletely": {
                        "description": "Indicates whether all the events in this log stream were searched.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SearchedLogStreams": {
                "items": {
                    "description": "Represents the search status of a log stream.",
                    "properties": {
                        "logStreamName": {
                            "description": "The name of the log stream.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[^:*]*",
                            "type": "string"
                        },
                        "searchedCompletely": {
                            "description": "Indicates whether all the events in this log stream were searched.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "SequenceToken": {
                "minLength": 1,
                "type": "string"
            },
            "ServiceUnavailableException": {},
            "StartFromHead": {
                "type": "boolean"
            },
            "StartQueryRequest": {
                "properties": {
                    "endTime": {
                        "description": "The end of the time range to query. The range is inclusive, so the specified end time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "limit": {
                        "description": "The maximum number of log events to return in the query. If the query string uses the <code>fields</code> command, only the specified fields and their values are returned.",
                        "maximum": 10000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "logGroupName": {
                        "description": "The log group on which to perform the query.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "queryString": {
                        "description": "The query string to use. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\">CloudWatch Logs Insights Query Syntax</a>.",
                        "maxLength": 2048,
                        "minLength": 0,
                        "type": "string"
                    },
                    "startTime": {
                        "description": "The beginning of the time range to query. The range is inclusive, so the specified start time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "logGroupName",
                    "startTime",
                    "endTime",
                    "queryString"
                ],
                "type": "object"
            },
            "StartQueryResponse": {
                "properties": {
                    "queryId": {
                        "description": "The unique ID of the query. ",
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StatsValue": {
                "format": "double",
                "type": "number"
            },
            "StopQueryRequest": {
                "properties": {
                    "queryId": {
                        "description": "The ID number of the query to stop. If necessary, you can use <code>DescribeQueries</code> to find this ID number.",
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    }
                },
                "required": [
                    "queryId"
                ],
                "type": "object"
            },
            "StopQueryResponse": {
                "properties": {
                    "success": {
                        "description": "This is true if the query was stopped by the <code>StopQuery</code> operation.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "StoredBytes": {
                "minimum": 0,
                "type": "integer"
            },
            "SubscriptionFilter": {
                "description": "Represents a subscription filter.",
                "properties": {
                    "creationTime": {
                        "description": "The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "destinationArn": {
                        "description": "The Amazon Resource Name (ARN) of the destination.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "distribution": {
                        "description": "The method used to distribute log data to the destination, which can be either random or grouped by log stream.",
                        "enum": [
                            "Random",
                            "ByLogStream"
                        ],
                        "type": "string"
                    },
                    "filterName": {
                        "description": "The name of the subscription filter.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[^:*]*",
                        "type": "string"
                    },
                    "filterPattern": {
                        "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                        "maxLength": 1024,
                        "minLength": 0,
                        "type": "string"
                    },
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "roleArn": {
                        "description": "<p/>",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SubscriptionFilters": {
                "items": {
                    "description": "Represents a subscription filter.",
                    "properties": {
                        "creationTime": {
                            "description": "The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "destinationArn": {
                            "description": "The Amazon Resource Name (ARN) of the destination.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "distribution": {
                            "description": "The method used to distribute log data to the destination, which can be either random or grouped by log stream.",
                            "enum": [
                                "Random",
                                "ByLogStream"
                            ],
                            "type": "string"
                        },
                        "filterName": {
                            "description": "The name of the subscription filter.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[^:*]*",
                            "type": "string"
                        },
                        "filterPattern": {
                            "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                            "maxLength": 1024,
                            "minLength": 0,
                            "type": "string"
                        },
                        "logGroupName": {
                            "description": "The name of the log group.",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                            "type": "string"
                        },
                        "roleArn": {
                            "description": "<p/>",
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "Success": {
                "type": "boolean"
            },
            "TagKey": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                "type": "string"
            },
            "TagList": {
                "items": {
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                    "type": "string"
                },
                "minItems": 1,
                "type": "array"
            },
            "TagLogGroupRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The key-value pairs to use for the tags.",
                        "items": {
                            "properties": {
                                "key": {
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                                    "type": "string"
                                },
                                "value": {
                                    "maxLength": 256,
                                    "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "logGroupName",
                    "tags"
                ],
                "type": "object"
            },
            "TagValue": {
                "maxLength": 256,
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                "type": "string"
            },
            "Tags": {
                "items": {
                    "properties": {
                        "key": {
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                            "type": "string"
                        },
                        "value": {
                            "maxLength": 256,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "maxItems": 50,
                "minItems": 1,
                "type": "array"
            },
            "TargetArn": {
                "minLength": 1,
                "type": "string"
            },
            "TestEventMessages": {
                "items": {
                    "minLength": 1,
                    "type": "string"
                },
                "maxItems": 50,
                "minItems": 1,
                "type": "array"
            },
            "TestMetricFilterRequest": {
                "properties": {
                    "filterPattern": {
                        "description": "A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event may contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.",
                        "maxLength": 1024,
                        "minLength": 0,
                        "type": "string"
                    },
                    "logEventMessages": {
                        "description": "The log event messages to test.",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "filterPattern",
                    "logEventMessages"
                ],
                "type": "object"
            },
            "TestMetricFilterResponse": {
                "properties": {
                    "matches": {
                        "description": "The matched events.",
                        "items": {
                            "description": "Represents a matched event.",
                            "properties": {
                                "eventMessage": {
                                    "description": "The raw event data.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "eventNumber": {
                                    "description": "The event number.",
                                    "type": "integer"
                                },
                                "extractedValues": {
                                    "description": "The values extracted from the event data by the filter.",
                                    "items": {
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Timestamp": {
                "minimum": 0,
                "type": "integer"
            },
            "Token": {
                "type": "string"
            },
            "UnrecognizedClientException": {},
            "UntagLogGroupRequest": {
                "properties": {
                    "logGroupName": {
                        "description": "The name of the log group.",
                        "maxLength": 512,
                        "minLength": 1,
                        "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tag keys. The corresponding tags are removed from the log group.",
                        "items": {
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "logGroupName",
                    "tags"
                ],
                "type": "object"
            },
            "Value": {
                "type": "string"
            }
        },
        "parameters": {
            "Action": {
                "in": "query",
                "name": "Action",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Version": {
                "in": "query",
                "name": "Version",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Algorithm": {
                "in": "header",
                "name": "X-Amz-Algorithm",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Content-Sha256": {
                "in": "header",
                "name": "X-Amz-Content-Sha256",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Credential": {
                "in": "header",
                "name": "X-Amz-Credential",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Date": {
                "in": "header",
                "name": "X-Amz-Date",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Security-Token": {
                "in": "header",
                "name": "X-Amz-Security-Token",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Signature": {
                "in": "header",
                "name": "X-Amz-Signature",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-SignedHeaders": {
                "in": "header",
                "name": "X-Amz-SignedHeaders",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "CreateLogStreamBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "logGroupName": {
                                    "description": "The name of the log group.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                    "type": "string"
                                },
                                "logStreamName": {
                                    "description": "The name of the log stream.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[^:*]*",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "logGroupName",
                                "logStreamName"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            },
            "DeleteLogGroupBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "logGroupName": {
                                    "description": "The name of the log group.",
                                    "maxLength": 512,
                                    "minLength": 1,
                                    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "logGroupName"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            }
        },
        "securitySchemes": {
            "hmac": {
                "description": "Amazon Signature authorization v4",
                "in": "header",
                "name": "Authorization",
                "type": "apiKey",
                "x-amazon-apigateway-authtype": "awsSigv4"
            }
        }
    }
}